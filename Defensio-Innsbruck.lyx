#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass beamer
\begin_preamble
\usetheme[sealopacity=0.0,boxes,rounded,shadow,darker]{ComputationalLogic}
% hide background image
\setbeamertemplate{background canvas}{}

\usepackage{pgf}
\usepackage{tikz}
\usetikzlibrary{arrows,automata}

\usepackage{bussproofs}

\usepackage{gnuplot-lua-tikz}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman lmodern
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title (Plain Frame)
Complexity of Equivalence Proofs of Simple Deterministic Grammars
\begin_inset Argument
status open

\begin_layout Plain Layout
Equivalence Proofs of SDG
\end_layout

\end_inset


\end_layout

\begin_layout Author
Michael FÃ¤rber
\begin_inset Argument
status open

\begin_layout Plain Layout
MF
\end_layout

\end_inset


\end_layout

\begin_layout Date
28th March 2014
\end_layout

\begin_layout Institute
Institute of Computer Science
\begin_inset Newline newline
\end_inset

University of Innsbruck
\begin_inset Newline newline
\end_inset

Austria
\begin_inset Argument
status open

\begin_layout Plain Layout
CL @ ICS @ UIBK
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "Includes.lyx"

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

% removes excessive spaces in presentation blocks above math environments
\end_layout

\begin_layout Plain Layout


\backslash
abovedisplayskip=0pt
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout BeginFrame
A Matter of Trust
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Premise}
\end_layout

\end_inset

We usually trust algorithms because they are proven to be correct.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Problems}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
An algorithm might be correct, but its implementation might contain errors.
\end_layout

\begin_layout Itemize
The machine executing an algorithm might misbehave.
\end_layout

\end_deeper
\begin_layout Pause

\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Solution: Proofs}
\end_layout

\end_inset


\end_layout

\begin_layout Block
An algorithm can certify its response with a proof, which the user can check
 afterwards.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Our problem
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Task}
\end_layout

\end_inset

Are two given simple deterministic grammars (SDGs) equivalent?
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Existing solution}
\end_layout

\end_inset

The equivalence of SDGs is decidable in P with the algorithm from Hirshfeld,
 Faron & Moller, but the algorithm does not certify its answers with proofs.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Question}
\end_layout

\end_inset

Can we find an algorithm to construct equivalence proofs of SDGs in P?
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Section
Grammars and proofs
\end_layout

\begin_layout BeginFrame
Simple deterministic grammars
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Grammar}
\end_layout

\end_inset

A simple deterministic grammar is a context-free grammar in Greibach normal
 form such that for each terminal 
\begin_inset Formula $a$
\end_inset

, there exists at most one production rule 
\begin_inset Formula $X\to a\alpha$
\end_inset

.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Equivalence}
\end_layout

\end_inset

Two variables are equivalent iff they generate the same language.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Example grammar
\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status open

\begin_layout Plain Layout

{Example 1}
\end_layout

\end_inset


\begin_inset Formula 
\begin{align*}
X & \to a+bX\\
Y & \to a+bY.
\end{align*}

\end_inset

We see that 
\begin_inset Formula $\lang X=\lang Y=b^{*}a$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status open

\begin_layout Plain Layout

{Example 2}
\end_layout

\end_inset


\begin_inset Formula 
\[
\begin{aligned}A & \to a & A & \to a\\
B & \to b & B & \to b\\
A_{B,0} & \to aB & B_{A,0} & \to bA\\
A_{B,n+1} & \to aBA_{B,n}A_{B,n} & B_{A,n+1} & \to bAB_{A,n}B_{A,n}\\
F_{n} & \to aBA_{B,n} & G_{n} & \to aB_{A,n}B
\end{aligned}
\]

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Example proof
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
onslide<2->{
\end_layout

\end_inset


\begin_inset Formula 
\[
\bussproof{\plusinf{a+bY}{a+bX}{\refl aa}{\timesinf{bY}{bX}{\refl bb}{\syminf YX{\sj XY}}}}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\bussproof{\transinf XY{\gr X{a+bX}}{\syminf{a+bX}Y{\transinf Y{a+bX}{\gr Y{a+bY}}{\axiom{a+bY}{a+bX}}}}}
\]

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
What is not a proof?
\end_layout

\begin_layout Example
\begin_inset Formula 
\[
\bussproof{\syminf XY{\syminf YX{\sj XY}}}
\]

\end_inset


\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Why is that an invalid proof?}
\end_layout

\end_inset

On paths between two equivalent judgements, there must be at least one product
 (
\begin_inset Formula $\times$
\end_inset

) rule.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Section
Our work
\end_layout

\begin_layout BeginFrame
Our proof construction algorithm
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Strategy}
\end_layout

\end_inset

Depth-first search with information which rules have already been constructed,
 to prove every judgement maximally once.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Tactics}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
base replacement: replaces variables with their 
\emph on
Caucal base
\emph default
 entry
\end_layout

\begin_layout Itemize
decomposition: own development; not always applicable, therefore falling
 back to base replacement sometimes
\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Our implementation
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Groof}
\end_layout

\end_inset

OCaml program to produce 
\emph on
gr
\emph default
ammar equivalence pr
\emph on
oof
\emph default
s.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Verification}
\end_layout

\end_inset

We proved soundness and completeness of parts of our algorithm in Isabelle/HOL.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Our grammars
\end_layout

\begin_layout Standard
We created several grammars containing equivalent variables to test our
 algorithm.
 Most of these grammars are scalable.
\end_layout

\begin_layout Example
\begin_inset Formula 
\begin{align*}
A_{0} & \to a & A_{0}^{'} & \to a\\
A_{n+1} & \to aA_{n}A_{n} & A_{n+1}^{'} & \to aA_{n}^{'}A_{n}^{'}
\end{align*}

\end_inset


\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Language overview}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $a^{2^{n}}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $a^{f_{n}}$
\end_inset

, where 
\begin_inset Formula $f_{n}$
\end_inset

 is the 
\begin_inset Formula $n$
\end_inset

-th Fibonacci number
\end_layout

\begin_layout Itemize
\begin_inset Formula $\left(ab\right)^{2^{n+1}}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\left(a+b\right)^{2^{n+2}}$
\end_inset


\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Complexity
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Lower bound}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
base replacement: exponential
\end_layout

\begin_layout Itemize
decomposition: exponential (when falling back to base replacement), but
 so far polynomial for compression grammars
\end_layout

\end_deeper
\begin_layout Pause

\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Upper bound}
\end_layout

\end_inset

We were able to prove that our proof strategy with the decomposition tactic
 has complexity 2-EXPTIME, but in experimental results, it took only maximally
 EXPTIME.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Results for Fibonacci grammar
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centerline{
\end_layout

\end_inset


\begin_inset CommandInset include
LatexCommand input
filename "OCaml/sizes/sizes_rules1.tex"

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout BeginFrame
Conclusion
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{What we created}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Simple proof system for equivalence proofs of SDGs
\end_layout

\begin_layout Itemize
Multiple proof strategies, together with experimental evaluation
\end_layout

\begin_layout Itemize
Example grammars with non-trivial equivalence proofs
\end_layout

\begin_layout Itemize
Isabelle formalisation of parts of the algorithms
\end_layout

\end_deeper
\begin_layout Pause

\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Future}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Extend the proof system to allow finding proofs in P
\end_layout

\begin_layout Itemize
Completely prove soundness/completeness of proof construction algorithm
 in Isabelle
\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame

\end_layout

\begin_layout Standard
\align center
Thank you for your attention!
\end_layout

\begin_layout EndFrame

\end_layout

\end_body
\end_document
