#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\begin_modules
theorems-ams-bytype
\end_modules
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Norm formalisation
\begin_inset CommandInset label
LatexCommand label
name "sec:Norm-formalisation"

\end_inset


\end_layout

\begin_layout Standard
In this section, we present our formalisation of grammars and norms in Isabelle/
HOL.
 Because in the formalisation we use several definitions related to association
 lists, we first introduce these.
\end_layout

\begin_layout Subsection
Association lists
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
renewcommand{
\backslash
isamarkupheader}[1]{}
\end_layout

\end_inset


\begin_inset CommandInset include
LatexCommand input
filename "IsaTeX/AList_ext.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "IsaTeX/Norm_defs.tex"

\end_inset


\end_layout

\begin_layout Section
Norm calculation algorithm
\begin_inset CommandInset label
LatexCommand label
name "sec:Norm-calculation-algorithm"

\end_inset


\end_layout

\begin_layout Standard
In this section, we give the idea behind our norm calculation algorithm
 and present its implementation, along with the partition iteration algorithm
 which we use in it.
\end_layout

\begin_layout Subsection
Idea
\end_layout

\begin_layout Standard
In our OCaml program to construct equivalence proofs of simple deterministic
 grammars, we initially implemented a norm calculation algorithm where the
 user had to provide a variable order 
\begin_inset Formula $\preceq$
\end_inset

 with the grammar, meaning that for all variables 
\begin_inset Formula $X$
\end_inset

 and 
\begin_inset Formula $Y$
\end_inset

 of the grammar, if 
\begin_inset Formula $X\preceq Y$
\end_inset

, then 
\begin_inset Formula $\left\Vert X\right\Vert \leq\left\Vert Y\right\Vert $
\end_inset

.
 We then calculated the norms of all variables iteratively by processing
 the variables in ascending variable order and calculating their norms based
 on the previously calculated norms, ignoring those variable production
 rules containing variables with greater or equal norm.
 In case that the final norms of the variables were not consistent with
 the provided variable order 
\begin_inset Formula $\preceq$
\end_inset

 (i.e., we found variables 
\begin_inset Formula $X$
\end_inset

 and 
\begin_inset Formula $Y$
\end_inset

 such that the calculated norms yielded 
\begin_inset Formula $\norm X>\norm Y$
\end_inset

, but 
\begin_inset Formula $X\preceq Y$
\end_inset

), the norm calculation algorithm quit with an error.
\end_layout

\begin_layout Standard
While this was a reliable and fast method to calculate norms, this method
 had the disadvantage that the user had to construct a variable order 
\begin_inset Formula $\preceq$
\end_inset

 when formulating the grammar, and formalising variable orders would have
 imposed an unnatural and in principle unnecessary restriction on grammars.
 For this reason, we looked into another approach without the need to construct
 a variable order.
 This new approach consists of two phases:
\end_layout

\begin_layout Enumerate
Norm overestimation: Here we determine which variables can be normed, then
 we calculate for each normable variable a preliminary norm, which is an
 overestimation of its actual norm.
\end_layout

\begin_layout Enumerate
Norm minimisation, or refinement: In this phase, we take the overestimated
 norms from the first phase and minimise them iteratively, until we reach
 a fixpoint, which will be equivalent to the actual norms.
\end_layout

\begin_layout Example
Consider the following grammar:
\begin_inset Formula 
\begin{align*}
A_{1} & \to a\\
A_{2} & \to aA_{1}\\
B & \to bA_{1}A_{1}A_{1}+cA_{2}
\end{align*}

\end_inset

Here, the output of the first phase might look as follows:
\begin_inset Formula 
\begin{align*}
A_{1} & \to a & \rightsquigarrow\left(A_{1},1,a,\left[\right]\right)\\
A_{2} & \to aA_{1} & \rightsquigarrow\left(A_{2},2,a,\left[A_{1}\right]\right)\\
B & \to bA_{1}A_{1}A_{1}+cA_{2} & {\color{red}\rightsquigarrow\left(B,4,b,\left[A_{1},A_{1},A_{1}\right]\right)}
\end{align*}

\end_inset

The 4-tuples on the right-hand side represent the preliminary norms, storing
 the variable, the norm, and the variable rule which induces the norm.
 As we can see, the preliminary norm for the variable 
\begin_inset Formula $B$
\end_inset

 is not its final norm, because at the time the algorithm calculated the
 norm of 
\begin_inset Formula $B$
\end_inset

, it did not have the norm of 
\begin_inset Formula $A_{2}$
\end_inset

 available, so it used the norm of 
\begin_inset Formula $A_{1}$
\end_inset

 to calculate the norm of 
\begin_inset Formula $B$
\end_inset

.
 Therefore, we need to minimise the preliminary norms, resulting in the
 following final norms:
\begin_inset Formula 
\begin{align*}
A_{1} & \to a & \rightsquigarrow\left(A_{1},1,a,\left[\right]\right)\\
A_{2} & \to aA_{1} & \rightsquigarrow\left(A_{2},2,a,\left[A_{1}\right]\right)\\
B & \to bA_{1}A_{1}A_{1}+cA_{2} & {\color{red}\rightsquigarrow\left(B,4,b,\left[A_{1},A_{1},A_{1}\right]\right)}{\color{green}\rightsquigarrow\left(B,3,c,\left[A_{2}\right]\right)}
\end{align*}

\end_inset

In this minimisation, the algorithm had as additional information the norm
 of 
\begin_inset Formula $A_{2}$
\end_inset

, resulting from which it correctly calculated the final norm of 
\begin_inset Formula $B$
\end_inset

.
\end_layout

\begin_layout Standard
The idea of the final algorithm is depicted in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Norm-calculation-algorithm."

\end_inset

.
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\begin_layout Plain Layout


\backslash
Function{iterate
\backslash
_norms}{$N, G$} 
\backslash
Comment{calculate preliminary norms}
\end_layout

\begin_layout Plain Layout

	
\backslash
State $V 
\backslash
gets 
\backslash
Call{filter}{
\backslash
Call{v
\backslash
_rule
\backslash
_has
\backslash
_norm}{N}, G}$ 
\backslash
Comment{normable variables}
\end_layout

\begin_layout Plain Layout

	
\backslash
If{$V=
\backslash
varnothing$}
\end_layout

\begin_layout Plain Layout

		
\backslash
State 
\backslash
Return $N$
\end_layout

\begin_layout Plain Layout

	
\backslash
Else
\end_layout

\begin_layout Plain Layout

		
\backslash
State $N'
\backslash
gets 
\backslash
Call{map}{
\backslash
Call{min
\backslash
_norm
\backslash
_of
\backslash
_t
\backslash
_rules}{N}, V}$
\end_layout

\begin_layout Plain Layout

		
\backslash
State 
\backslash
Return 
\backslash
Call{iterate
\backslash
_norms}{$N@N',G$}
\end_layout

\begin_layout Plain Layout

	
\backslash
EndIf
\end_layout

\begin_layout Plain Layout


\backslash
EndFunction
\end_layout

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
Function{norms
\backslash
_of
\backslash
_grammar}{$G$} 
\backslash
Comment{calculate final norms}
\end_layout

\begin_layout Plain Layout

	
\backslash
State $N 
\backslash
gets 
\backslash
Call{iterate
\backslash
_norms}{
\backslash
varnothing, G}$
\end_layout

\begin_layout Plain Layout

	
\backslash
State 
\backslash
Return $
\backslash
Call{refine
\backslash
_norms}{N,G}$
\end_layout

\begin_layout Plain Layout


\backslash
EndFunction
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Norm calculation algorithm.
\begin_inset CommandInset label
LatexCommand label
name "alg:Norm-calculation-algorithm."

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
We are now going to show some complexity results.
\end_layout

\begin_layout Lemma
Calculating the fixpoint of a norm overestimation takes maximally 
\begin_inset Formula $n$
\end_inset

 iterations, where 
\begin_inset Formula $n$
\end_inset

 is the number of variables of the grammar.
\begin_inset CommandInset label
LatexCommand label
name "lem:Fixpoint-n-iterations"

\end_inset


\end_layout

\begin_layout Proof
We prove this by induction on 
\begin_inset Formula $n$
\end_inset

.
 The base case is trivial, so we consider the step case.
 Having a grammar with 
\begin_inset Formula $n+1$
\end_inset

 variables, the induction hypothesis states that we can calculate the norm
 fixpoint of 
\begin_inset Formula $n$
\end_inset

 variables in maximally 
\begin_inset Formula $n$
\end_inset

 iterations.
 Let us consider the 
\begin_inset Formula $n+1$
\end_inset

-th variable 
\begin_inset Formula $X$
\end_inset

: In case that we have already reached its final norm 
\begin_inset Formula $\norm X$
\end_inset

 in the first 
\begin_inset Formula $n$
\end_inset

 iterations, the conclusion follows automatically.
 Otherwise, we can calculate the final norm 
\begin_inset Formula $\norm X$
\end_inset

 in the 
\begin_inset Formula $n+1$
\end_inset

-th iteration by just calculating the norms of the variable rules of 
\begin_inset Formula $X$
\end_inset

 and taking the smallest one of them.
 This will yield a correct norm, because all other variables have already
 achieved their final norm.
\end_layout

\begin_layout Lemma
Given a set of norms, calculating a norm of a variable can be done in 
\begin_inset Formula $\mathcal{O}(n)$
\end_inset

, where 
\begin_inset Formula $n$
\end_inset

 is the number of variables of the grammar.
\begin_inset CommandInset label
LatexCommand label
name "lem:Single-Norm-Complexity"

\end_inset


\end_layout

\begin_layout Proof
To calculate the norm of a variable, for each production rule of that variable,
 we look up the norms of each variable in the production rule and sum them
 up.
 Then, we determine the smallest sum among all production rules, which will
 be the norm.
 That means that we maximally have to look up 
\begin_inset Formula $m\cdot k$
\end_inset

 norms, where 
\begin_inset Formula $m$
\end_inset

 is the maximal number of production rules present among all variables,
 and 
\begin_inset Formula $k$
\end_inset

 is the maximal length of any production rule (so the grammar is in 
\begin_inset Formula $k$
\end_inset

-GNF).
 Because looking up a norm from the existing set of norms takes linear time
 in the worst case, we have a worst-case runtime of 
\begin_inset Formula $m\cdot k\cdot n$
\end_inset

.
\end_layout

\begin_layout Lemma
One norm fixpoint iteration takes time 
\begin_inset Formula $\mathcal{O}(n^{2})$
\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "lem:Iteration-time."

\end_inset


\end_layout

\begin_layout Proof
In one iteration, we go through all previously calculated norms, which amounts
 to maximally 
\begin_inset Formula $n$
\end_inset

 norms.
 Then, for each variable for which a norm exists, we calculate a new norm,
 which by lemma 
\begin_inset CommandInset ref
LatexCommand ref
reference "lem:Single-Norm-Complexity"

\end_inset

 can be done in 
\begin_inset Formula $\mathcal{O}(n)$
\end_inset

.
 Therefore, the conclusion follows.
\end_layout

\begin_layout Corollary
Norm minimisation has complexity 
\begin_inset Formula $\mathcal{O}(n^{3})$
\end_inset

.
\end_layout

\begin_layout Proof
Follows from lemmata 
\begin_inset CommandInset ref
LatexCommand ref
reference "lem:Fixpoint-n-iterations"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "lem:Iteration-time."

\end_inset

.
\end_layout

\begin_layout Standard
With a similar argument, we can show that the complexity of the norm overestimat
ion is also 
\begin_inset Formula $\mathcal{O}(n^{3})$
\end_inset

, giving the whole norm calculation algorithm a complexity of 
\begin_inset Formula $\mathcal{O}(n^{3})$
\end_inset

.
\end_layout

\begin_layout Standard
In the next subsections, we present the implementation of the algorithm.
\end_layout

\begin_layout Subsection
Partition iteration
\end_layout

\begin_layout Standard
For the norm overestimation calculation, we created a versatile partition
 iteration algorithm, which can most generally be used to resolve dependencies
 between elements of a list.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
renewcommand{
\backslash
isamarkupheader}[1]{
\backslash
subsection{#1}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
renewcommand{
\backslash
isamarkupheader}[1]{}
\end_layout

\end_inset


\begin_inset CommandInset include
LatexCommand input
filename "IsaTeX/Partition_iterate.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "IsaTeX/Norm_funs.tex"

\end_inset


\end_layout

\begin_layout Section
Correctness and completeness proof
\begin_inset CommandInset label
LatexCommand label
name "sec:Proof"

\end_inset


\end_layout

\begin_layout Standard
In this section, we give a very brief overview of our correctness and completene
ss proofs for our norm calculation algorithm.
 The proofs have all been checked automatically by Isabelle.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "IsaTeX/Report_proofs.tex"

\end_inset


\end_layout

\begin_layout Section
Results
\begin_inset CommandInset label
LatexCommand label
name "sec:Results"

\end_inset


\end_layout

\begin_layout Standard
In this section, we show how to use the resulting program, how to integrate
 it with other programs, and show some statistics.
\end_layout

\begin_layout Subsection
Example
\end_layout

\begin_layout Standard
We are going to show how to use of the norm calculation algorithm in Isabelle.
 First, let us define an example grammar:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align*}
A_{1} & \to a & \left\Vert A_{1}\right\Vert =1 &  & B & \to aA_{1}A_{1}A_{1} & \left\Vert B\right\Vert =4\\
A_{2} & \to aA_{1} & \left\Vert A_{2}\right\Vert =2 &  & C & \to xA_{3}+yB & \left\Vert C\right\Vert =4\\
A_{3} & \to aA_{2} & \left\Vert A_{3}\right\Vert =3
\end{align*}

\end_inset

To use this grammar in Isabelle, we need to translate the grammar to an
 Isabelle representation.
 In this process we need to use types with a well-founded order to represent
 variables and terminals.
 Unfortunately, this means that we cannot use characters like 'a' to represent
 terminals, because for characters, there does not exist a well-founded
 order in Isabelle.
 Therefore, we translate characters and variables to natural numbers (which
 are well-founded), yielding the following representation:
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "IsaTeX/Report_demo.tex"

\end_inset


\end_layout

\begin_layout Subsection
Integration with existing code
\begin_inset CommandInset label
LatexCommand label
name "sub:Integration-with-OCaml"

\end_inset


\end_layout

\begin_layout Standard
The export of the Isabelle code to OCaml turned out to be relatively simple.
 However, by default, natural numbers are encoded as inductive datatype.
 As this representation is very inconvenient to use in OCaml, we imported
 the theory Code_Target_Nat to make Isabelle export the code using the OCaml
 datatype big_int.
 Following that, we only had to convert the OCaml code from int to big_int,
 which consisted mostly of tasks like replacing operators such as 
\begin_inset Quotes eld
\end_inset

+
\begin_inset Quotes erd
\end_inset

 by 
\begin_inset Quotes eld
\end_inset

add_big_int
\begin_inset Quotes erd
\end_inset

 and did not have a noticable impact on the performance of the program.
\end_layout

\begin_layout Standard
The biggest problem in the integration of the code exported by Isabelle
 was that the functions we defined in Isabelle were polymorphic with type
 constraints (namely that types need to have a well-ordered relation).
 That means that to use the exported functions in OCaml, we needed to supply
 orderings for the used datatypes, which we defined as follows:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={[Objective]Caml}"
inline false
status open

\begin_layout Plain Layout

let        eq_poly = {HOL.equal = (=)};;
\end_layout

\begin_layout Plain Layout

let       ord_poly = {Orderings.less_eq = (<=);
\end_layout

\begin_layout Plain Layout

                      Orderings.less = (<)};;
\end_layout

\begin_layout Plain Layout

let  preorder_poly = {Orderings.ord_preorder =
\end_layout

\begin_layout Plain Layout

                        ord_poly};;
\end_layout

\begin_layout Plain Layout

let     order_poly = {Orderings.preorder_order =
\end_layout

\begin_layout Plain Layout

                        preorder_poly};;
\end_layout

\begin_layout Plain Layout

let  linorder_poly = {Orderings.order_linorder =
\end_layout

\begin_layout Plain Layout

                        order_poly};;
\end_layout

\begin_layout Plain Layout

let wellorder_poly = {Orderings.linorder_wellorder =
\end_layout

\begin_layout Plain Layout

                        linorder_poly};;
\end_layout

\end_inset

We have to be cautious when using these orders, as in general, the operator
 
\begin_inset Quotes eld
\end_inset

<
\begin_inset Quotes erd
\end_inset

 of OCaml is not a well-founded relation on all datatypes, for example strings.
 However, for our application, this is not a problem, as for those types
 which do not have a well-founded relation, we only use a finite set of
 different values: For example, in the OCaml code, we use strings as variable
 identifiers, for which OCaml's 
\begin_inset Quotes eld
\end_inset

<
\begin_inset Quotes erd
\end_inset

 is not well-founded, but still, we only use a 
\emph on
finite
\emph default
 
\emph on
set
\emph default
 of variables i.e.
 strings, so we can use OCaml's 
\begin_inset Quotes eld
\end_inset

<
\begin_inset Quotes erd
\end_inset

 here, without compromising termination.
\end_layout

\begin_layout Subsection
Statistics
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\begin_inset CommandInset include
LatexCommand input
filename "Isabelle/statistics.tex"

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
