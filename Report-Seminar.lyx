#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass clseminar
\begin_preamble
% import graphic files from other directories
\usepackage[svgpath=Graphics/]{svg}

% Isabelle
\usepackage{IsaTeX/isabelle}
\usepackage{IsaTeX/isabellesym}
\usepackage{mathpartir}
\isadroptag{theory}

% algorithms
\usepackage{algpseudocode}
% to fix nested calls in algorithms --- if not, nested calls produce LaTeX errors
\usepackage{fixltx2e}
\MakeRobust{\Call}

% don't show "section §1.1" in references, but "section 1.1"
\newref{sec}{name = {section~}, refcmd = {\ref{#1}}}

% to show DRAFT watermark
%\usepackage[firstpage]{draftwatermark}

% center figures in all float environments
\makeatletter
\g@addto@macro\@floatboxreset{\centering}
\makeatother

% graph drawing
\usepackage{pgf}
\usepackage{tikz}
\usetikzlibrary{arrows, positioning}

% change default colours
\definecolor{green}{RGB}{0, 200, 0}
\definecolor{red}{RGB}{180,0,0}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams-bytype
\end_modules
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman lmodern
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Calculating Norms of Simple Deterministic Grammars
\end_layout

\begin_layout Author
Michael Färber
\end_layout

\begin_layout Supervisor
Cezary Kaliszyk
\end_layout

\begin_layout Abstract
For normed simple deterministic grammars, there exist algorithms running
 in polynomial time to calculate the length of the shortest word (norm)
 of each variable.
 We implemented such an algorithm and proved its soundness and completeness
 in Isabelle/HOL.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "Includes.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Abstand bei 
\begin_inset Formula $\text{\lang X}$
\end_inset

 kürzen!
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
In my master's thesis 
\begin_inset CommandInset citation
LatexCommand cite
key "faerber2014"

\end_inset

, I present a way to construct equivalence proofs of simple deterministic
 grammars.
 To increase the confidence in the proof construction algorithm I developed
 for the thesis, we considered verifying the algorithm formally in an interactiv
e theorem prover.
 The algorithm consists of many separate parts which could be considered
 worthwhile to verify; for example, the proof construction, the norm calculation
, the grammar verification, and several other parts.
\end_layout

\begin_layout Standard
It turned out that the whole algorithm was too big to be verified in the
 framework of this seminar, so we concentrated on only two parts, namely
 grammar verification and norm calculation.
 For this task, we first formalised simple deterministic grammars and their
 norms.
 Then, we implemented an algorithm to calculate the norms of variables of
 simple deterministic grammars.
 Finally, we wrote a proof that our algorithm corresponds to the formalisation
 of norms, i.e.
 it correctly calculates norms of simple deterministic grammars.
 We conducted all this work (formalisation, implementation, verification)
 in Isabelle/HOL, which is an LCF-style theorem prover programmed in Standard
 ML 
\begin_inset CommandInset citation
LatexCommand cite
key "paulson1990"

\end_inset

.
 This prover allows us to export code written in it into other languages,
 such as Scala, OCaml and Haskell 
\begin_inset CommandInset citation
LatexCommand cite
key "haftmann2013"

\end_inset

.
 Having proven soundness and correctness of our algorithm in Isabelle/HOL,
 we then integrated the OCaml code generated from our norm calculation algorithm
 by Isabelle/HOL into the proof generation algorithm from my master's thesis
 --- see subsection 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Integration-with-OCaml"

\end_inset

.
\end_layout

\begin_layout Section
Grammars
\begin_inset CommandInset label
LatexCommand label
name "sec:Grammars"

\end_inset


\end_layout

\begin_layout Standard
In this section, we discuss the basics of simple deterministic grammars
 and their norms.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
renewcommand{
\backslash
section}[1]{
\backslash
subsection{#1}}
\end_layout

\end_inset


\begin_inset CommandInset include
LatexCommand input
filename "CFG-SDG.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
renewcommand{
\backslash
section}[1]{
\backslash
section{#1}}
\end_layout

\end_inset


\begin_inset CommandInset include
LatexCommand input
filename "Norm-Isabelle.lyx"

\end_inset


\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
In this seminar, we achieved the following goals:
\end_layout

\begin_layout Itemize
Formalised simple deterministic grammars and their norms
\end_layout

\begin_layout Itemize
Created an algorithm to calculate norms
\end_layout

\begin_layout Itemize
Integrated the algorithm into existing OCaml program to produce equivalence
 proofs of simple deterministic grammars
\end_layout

\begin_layout Itemize
Proved soundness and completeness of the algorithm
\end_layout

\begin_layout Standard
In the future, a verified decision procedure for variable equivalence would
 also be desirable, i.e., a verified algorithm to decide whether for two variables
 
\begin_inset Formula $X$
\end_inset

 and 
\begin_inset Formula $Y$
\end_inset

, their sets of producible words are equivalent, so 
\begin_inset Formula $\lang X=\lang Y$
\end_inset

.
 For this purpose, one might use the algorithm described in 
\begin_inset CommandInset citation
LatexCommand cite
key "hirshfeld1996"

\end_inset

 or the improved version in 
\begin_inset CommandInset citation
LatexCommand cite
key "lasota2006"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "Literature"
options "bibtotoc,abbrv"

\end_inset


\end_layout

\end_body
\end_document
