#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass beamer
\begin_preamble
\usepackage{pgf}
\usepackage{tikz}
\usetikzlibrary{arrows,automata}

\usepackage{bussproofs}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title (Plain Frame)
Equivalence proofs of simple deterministic grammars
\end_layout

\begin_layout Author
Michael Färber
\end_layout

\begin_layout Institute
Université Bordeaux 1, LaBRI
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "Includes.lyx"

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout BeginFrame
Scenario
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Graphics/Tram Bx.jpg
	lyxscale 25
	scale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Tram at Bordeaux.
 Copyright by 
\begin_inset CommandInset href
LatexCommand href
name "Peter Gugerell"
target "http://commons.wikimedia.org/wiki/File:Frankreich_2007.10.23_142442_.jpg"

\end_inset

.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
A Matter of Trust
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Premise}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<1->
\end_layout

\end_inset

Many algorithms give only yes/no answers.
 We trust them usually because they are proven to be correct.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Problems}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<2->
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
An algorithm might be correct, but its implementation might be erroneous.
\end_layout

\begin_layout Itemize
The machine executing an algorithm might misbehave.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Solution: Proofs}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<3->
\end_layout

\end_inset


\end_layout

\begin_layout Block
An algorithm can certify its response with a proof, which the user can check
 afterwards.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Our problem
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Task}
\end_layout

\end_inset

Are two given simple deterministic grammars (sdgs) equivalent?
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Existing solution}
\end_layout

\end_inset

The equivalence of sdgs is decidable in P, but the algorithm 
\begin_inset CommandInset citation
LatexCommand cite
key "hirshfeld1996"

\end_inset

 does not produce an equivalence proof.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Question}
\end_layout

\end_inset

Can we find an algorithm to construct equivalence proofs of sdgs in time
 P?
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Section
Grammars and proofs
\end_layout

\begin_layout BeginFrame
Simple deterministic grammars
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Grammar}
\end_layout

\end_inset

A simple deterministic grammar is a context-free grammar in Greibach normal
 form such that for each terminal 
\begin_inset Formula $a$
\end_inset

, there exists at most one production rule 
\begin_inset Formula $X\to a\alpha$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Norm}
\end_layout

\end_inset


\begin_inset Formula $\norm X$
\end_inset

 equals the length of the shortest word producible by variable 
\begin_inset Formula $X$
\end_inset

, or 
\begin_inset Formula $\infty$
\end_inset

 if no such word exists.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Strictly normed grammars}
\end_layout

\end_inset

A grammar is strictly normed iff all its variables have a finite norm.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Equivalence}
\end_layout

\end_inset

Two variables are equivalent iff they generate the same language.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Example grammar
\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status open

\begin_layout Plain Layout

{Example:}
\end_layout

\end_inset


\begin_inset Formula 
\begin{align*}
X & \to a+bC_{1}\\
Y & \to a+bC_{2}\\
C_{1} & \to c\\
C_{2} & \to c
\end{align*}

\end_inset


\begin_inset Formula 
\[
\bussproof{\transinf{C_{1}}{C_{2}}{\gr{C_{1}}c}{\syminf c{C_{2}}{\gr{C_{2}}c}}}
\]

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Full example proof
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
onslide<3->{
\end_layout

\end_inset


\begin_inset Formula 
\[
\bussproof{\transinf{C_{2}}{C_{1}}{\gr{C_{2}}c}{\syminf c{C_{1}}{\gr{C_{1}}c}}}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
onslide<2->{
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\bussproof{\plusinf{a+bC_{2}}{a+bC_{1}}{\refl aa}{\timesinf{bC_{2}}{bC_{1}}{\refl bb}{\axiom{C_{2}}{C_{1}}}}}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\bussproof{\transinf XY{\gr X{a+bC_{1}}}{\syminf{a+bC_{1}}Y{\transinf Y{a+bC_{1}}{\gr Y{a+bC_{2}}}{\axiom{a+bC_{2}}{a+bC_{1}}}}}}
\]

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Recursive grammar
\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status open

\begin_layout Plain Layout

{Example:}
\end_layout

\end_inset


\begin_inset Formula 
\begin{align*}
X & \to a+bX\\
Y & \to a+bY.
\end{align*}

\end_inset

We see that 
\begin_inset Formula $\lang X=\lang Y=b^{*}a$
\end_inset

.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Implicit induction proof
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
onslide<2->{
\end_layout

\end_inset


\begin_inset Formula 
\[
\bussproof{\plusinf{a+bY}{a+bX}{\refl aa}{\timesinf{bY}{bX}{\refl bb}{\syminf YX{\sj XY}}}}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\bussproof{\transinf XY{\gr X{a+bX}}{\syminf{a+bX}Y{\transinf Y{a+bX}{\gr Y{a+bY}}{\axiom{a+bY}{a+bX}}}}}
\]

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
What is not a proof?
\end_layout

\begin_layout Example
\begin_inset Formula 
\[
\bussproof{\syminf XY{\syminf YX{\sj XY}}}
\]

\end_inset


\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Why is that an invalid proof?}
\end_layout

\end_inset

On paths between two equivalent rules, there must be at least one product
 (
\begin_inset Formula $\times$
\end_inset

) rule.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Proof system
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Schemes of non-strict rules:
\end_layout

\begin_layout Itemize
\begin_inset Formula $\bussproof{\syminf xy{\axiom yx}}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\bussproof{\transinf xz{\axiom xy}{\axiom yz}}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\bussproof{\plusinf{x+y}{x'+y'}{\axiom x{x'}}{\axiom y{y'}}}$
\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Schemes of strict rules:
\end_layout

\begin_layout Itemize
\begin_inset Formula $\bussproof{\refl xx}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\bussproof{\timesinf{x\cdot y}{x'\cdot y'}{\axiom x{x'}}{\axiom y{y'}}}$
\end_inset


\end_layout

\begin_layout Plain Layout
Strict rules:
\end_layout

\begin_layout Itemize
\begin_inset Formula $\bussproof{\gr X{\Gr X}}$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Proof-rules"

\end_inset

Proof rules.
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
explain strict rules?
\end_layout

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Section
Proof construction algorithm
\end_layout

\begin_layout BeginFrame
Automatic proof construction
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Algorithm}
\end_layout

\end_inset

Depth-first search with information which rules have already been constructed,
 to avoid proving the same judgement multiple times.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Proving one judgement}
\end_layout

\end_inset

Given a certain judgement 
\begin_inset Formula $j$
\end_inset

 to prove, we construct a rule with this judgement 
\begin_inset Formula $j$
\end_inset

 as conclusion.
 This new rule may have up to two premises, which in turn we try to prove
 recursively.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Obvious construction rules
\end_layout

\begin_layout Itemize
\begin_inset Formula $\bussproof{\binaryinf{\axiom A{\Gr A}}{\axiom{\Gr A}B}AB{\text{trans (pp)}}}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\bussproof{\binaryinf{\axiom aa}{\axiom PQ}{aP}{aQ}{\ensuremath{\times}\text{ (ss-\times)}}}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\bussproof{\binaryinf{\axiom{a\alpha}{a\alpha'}}{\axiom{\beta}{\beta'}}{a\alpha+\beta}{a\alpha'+\beta'}{\ensuremath{+}}}$
\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
PP rules
\end_layout

\begin_layout Standard
What to do when we encounter products of variables on both sides of a judgement?
\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status open

\begin_layout Plain Layout

{Example:}
\end_layout

\end_inset


\begin_inset Formula 
\[
AB\equiv CD
\]

\end_inset


\end_layout

\begin_layout Standard
Easy to treat when 
\begin_inset Formula $\norm A=\norm C$
\end_inset

 (application of 
\begin_inset Formula $\times$
\end_inset

 rule), but otherwise we have to rewrite with the trans rule.
\end_layout

\begin_layout Subsection
Strategy 1
\end_layout

\begin_layout BeginFrame
Strategy 1: Grammar replacement
\end_layout

\begin_layout Standard
In case we encounter a term such as 
\begin_inset Formula $AB\equiv CD$
\end_inset

, we might replace a variable by its production rules; e.g.
 if 
\begin_inset Formula $A\to aX+bY$
\end_inset

, then we might apply
\begin_inset Formula 
\[
\bussproof{\transinf{AB}{CD}{\axiom{AB}{\left(aX+bY\right)B}}{\axiom{\left(aX+bY\right)B}{CD}}}
\]

\end_inset


\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Problem}
\end_layout

\end_inset

This yields exponential-size proofs even for relatively simple equivalences.
\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status open

\begin_layout Plain Layout

{Example:}
\end_layout

\end_inset


\begin_inset Formula 
\begin{align*}
A_{0} & \to a & A_{0}^{'} & \to a\\
A_{n+1} & \to aA_{n}A_{n} & A_{n+1}^{'} & \to aA_{n}^{'}A_{n}^{'}
\end{align*}

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Subsection
Strategy 2
\end_layout

\begin_layout BeginFrame
Caucal base
\end_layout

\begin_layout Standard
For the next strategy, we use the Caucal base, which is a medium also used
 in the polynomial equivalence algorithm.
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Idea}
\end_layout

\end_inset

The base stores which variables are prefixes of other variables.
\begin_inset Newline newline
\end_inset

If 
\begin_inset Formula $Y$
\end_inset

 is prefix of 
\begin_inset Formula $X$
\end_inset

, then 
\begin_inset Formula $\left(X,Y\alpha\right)\in B$
\end_inset

, where 
\begin_inset Formula $\alpha$
\end_inset

 is a postfix of 
\begin_inset Formula $X$
\end_inset

 and 
\begin_inset Formula $X\equiv Y\alpha$
\end_inset

.
\end_layout

\begin_layout Pause
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Nice properties}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
The size of the base is quadratic.
\end_layout

\begin_layout Itemize
Given 
\begin_inset Formula $X$
\end_inset

 and 
\begin_inset Formula $\norm Y$
\end_inset

, we can calculate 
\begin_inset Formula $\alpha$
\end_inset

 in time P such that 
\begin_inset Formula $\left(X,Y\alpha\right)\in B$
\end_inset

 iff 
\begin_inset Formula $Y$
\end_inset

 is prefix of 
\begin_inset Formula $X$
\end_inset

.
\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Strategy 2: Base replacement
\end_layout

\begin_layout Standard
If we have to prove 
\begin_inset Formula $AB\equiv CD$
\end_inset

 and know that 
\begin_inset Formula $\norm A>\norm C$
\end_inset

, then we know that 
\begin_inset Formula $\left(A,C\alpha\right)\in B$
\end_inset

.
 We therefore replace 
\begin_inset Formula $A$
\end_inset

 by 
\begin_inset Formula $C\alpha$
\end_inset

 in our resulting proof:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\bussproof{\transinf{AB}{CD}{\timesinf{AB}{C\alpha B}{\axiom A{C\alpha}}{\axiom BB}}{\timesinf{C\alpha B}{CD}{\axiom CC}{\axiom{\alpha B}D}}}
\]

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status open

\begin_layout Plain Layout

{Examples:}
\end_layout

\end_inset


\begin_inset Formula 
\begin{align*}
A_{0} & \to a & A_{0}^{'} & \to a\\
A_{n+1} & \to aA_{n}A_{n} & A_{n+1}^{'} & \to aA_{n}^{'}A_{n}^{'}
\end{align*}

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset Formula 
\begin{align*}
W & \to aB & Y & \to a & B & \to b\\
X & \to c & Z & \to bX
\end{align*}

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Example proof with BR
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\bussproof{\timesinf{YBX}{YZ}{\refl YY}{\transinf{BX}Z{\timesinf{BX}{bX}{\gr Bb}{\refl XX}}{\gr{bX}Z}}}
\]

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\bussproof{\timesinf{WX}{YBX}{\transinf W{YB}{\gr W{aB}}{\timesinf{aB}{YB}{\gr aY}{\refl BB}}}{\refl XX}}
\]

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\bussproof{\transinf{WX}{YZ}{\axiom{WX}{YBX}}{\axiom{YBX}{YZ}}}
\]

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Base replacement problems
\end_layout

\begin_layout Standard
Base replacement produces proofs of exponential size; e.g.
 for proving 
\begin_inset Formula $F^{n}\equiv G^{n}$
\end_inset

 of following grammar:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\begin{aligned}A & \to a & A & \to a\\
B & \to b & B & \to b\\
A_{B}^{0} & \to aB & B_{A}^{0} & \to bA\\
A_{B}^{n+1} & \to aBA_{B}^{n}A_{B}^{n} & B_{A}^{n+1} & \to bAB_{A}^{n}B_{A}^{n}\\
F^{n} & \to aBA_{B}^{n} & G^{n} & \to aB_{A}^{n}B
\end{aligned}
\]

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Subsection
Strategy 3
\end_layout

\begin_layout BeginFrame
Decomposition
\end_layout

\begin_layout Standard
For the next strategy, we invented a new operation, which we called 
\begin_inset Quotes eld
\end_inset

Decomposition
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Idea}
\end_layout

\end_inset

The decomposition calculates the prefix of a variable possessing a certain
 norm.
\begin_inset Newline newline
\end_inset

Given that 
\begin_inset Formula $\alpha$
\end_inset

 is a prefix of 
\begin_inset Formula $X$
\end_inset

 and there exists a prefix 
\begin_inset Formula $\beta$
\end_inset

 of 
\begin_inset Formula $Y$
\end_inset

 such that 
\begin_inset Formula $X\equiv\alpha\beta,$
\end_inset

 we can calculate 
\begin_inset Formula $\beta$
\end_inset

 from 
\begin_inset Formula $\norm X$
\end_inset

, 
\begin_inset Formula $\norm{\alpha}$
\end_inset

 and 
\begin_inset Formula $Y$
\end_inset

 in time P.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout AlertBlock
\begin_inset ERT
status open

\begin_layout Plain Layout

{Limited domain}
\end_layout

\end_inset

Unlike the base, decomposition is not always guaranteed to return successfully,
 as there does not always exist a polynomial-size prefix 
\begin_inset Formula $\beta$
\end_inset

 of 
\begin_inset Formula $Y$
\end_inset

! In this case, we fall back to base replacement.
 However, decomposition always works if there are no sums in the grammar.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Strategy 3: Decomposition
\end_layout

\begin_layout Standard
If we have to prove 
\begin_inset Formula $AB\equiv CD$
\end_inset

 and know that 
\begin_inset Formula $\norm A>\norm C$
\end_inset

, then 
\begin_inset Formula $\alpha=C$
\end_inset

, and we try to calculate 
\begin_inset Formula $\beta$
\end_inset

 from 
\begin_inset Formula $\norm A$
\end_inset

, 
\begin_inset Formula $\norm C$
\end_inset

 and 
\begin_inset Formula $D$
\end_inset

.
 If this calculation is successful, we replace 
\begin_inset Formula $A$
\end_inset

 by 
\begin_inset Formula $C\beta$
\end_inset

 in our resulting proof:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\bussproof{\transinf{AB}{CD}{\timesinf{AB}{C\beta B}{\axiom A{C\beta}}{\axiom BB}}{\timesinf{C\beta B}{CD}{\axiom CC}{\axiom{\beta B}D}}}
\]

\end_inset

This strategy succeeds in finding a polynomial-size proof for the counter-exampl
e of the base replacement strategy, but ...
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
It happened last week ...
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Graphics/fuuuu.jpg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
An image sometimes says more than a thousand words ...
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Decomposition problems
\end_layout

\begin_layout Standard
Decomposition produces proofs of exponential size; e.g.
 for proving 
\begin_inset Formula $F^{n}\equiv G^{n}$
\end_inset

 of following grammar:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\begin{aligned}A & \to a+b & A & \to a+b\\
B & \to b+a & B & \to b+a\\
A_{B}^{0} & \to\left(a+b\right)B & B_{A}^{0} & \to\left(b+a\right)A\\
A_{B}^{n+1} & \to\left(a+b\right)BA_{B}^{n}A_{B}^{n} & B_{A}^{n+1} & \to\left(b+a\right)AB_{A}^{n}B_{A}^{n}\\
F^{n} & \to\left(a+b\right)BA_{B}^{n} & G^{n} & \to\left(a+b\right)B_{A}^{n}B
\end{aligned}
\]

\end_inset

This is because the grammar of each variable is a sum, which is why decompositio
n always fails, and we have to fall back to base replacement, which we already
 claimed to produce exponential-size proofs for a similar grammar before.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Then what is decomposition good for, anyway?
\end_layout

\begin_layout Standard
So far, using the decomposition we did not find a single exponential-size
 proof when we looked at grammars without sums.
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Further problem}
\end_layout

\end_inset

It is not even clear whether the given proof system allows polynomial-size
 proofs for all possible kinds of grammars.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout BeginFrame
Outlook
\end_layout

\begin_layout Itemize
Find new strategy to prevent exponential-size proofs
\end_layout

\begin_layout Itemize
Adapt given proof system
\end_layout

\begin_layout Itemize
Find new proof system: A system more closely related to the existing polynomial
 algorithm would allow polynomial-size proofs, but proofs in it might not
 be as simple to verify.
\begin_inset Newline newline
\end_inset

Possible candidate: 
\begin_inset Formula $\lambda\Pi$
\end_inset

 (first order dependent type theory)
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame

\end_layout

\begin_layout Standard
\align center
Thank you for your attention! Questions?
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Bibliography
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "Literature"
options "plain"

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\end_body
\end_document
