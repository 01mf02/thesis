#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass clmthesis
\begin_preamble
\plainauthor{Michael Färber}
\plaintitle{Complexity of equivalence proofs of simple deterministic grammars}


% to show DRAFT watermark
\usepackage[firstpage]{draftwatermark}

\usepackage{bussproofs}

% make sum/integral limits always appear above/below the operator, not next to it
\everymath{\displaystyle}

% center figures in all float environments
% (collides with LyX if we use rotated figures, therefore disabled)
%\usepackage{floatrow}

% center figures in all float environments
\makeatletter
\g@addto@macro\@floatboxreset{\centering}
\makeatother

\newcommand{\includesvg}[1]{\input{#1.pdf_tex}}

\usepackage{pgf}
\usepackage{tikz}
\usetikzlibrary{arrows, positioning}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams-bytype
\end_modules
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Complexity of equivalence proofs of simple deterministic grammars
\end_layout

\begin_layout Author
Michael Färber
\end_layout

\begin_layout Supervisors
Géraud Sénizergues, Cezary Kaliszyk
\end_layout

\begin_layout Abstract
This abstract is yet to be written, most probably somewhere around in June
 ...
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "Includes.lyx"

\end_inset


\end_layout

\begin_layout Chapter*
Introduction
\end_layout

\begin_layout Standard
Here goes an introduction of 1-2 pages.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Motivation: Why do we want to construct proofs after all?
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
general problem
\end_layout

\begin_layout Itemize
what did people so far do about it? (write to here)
\end_layout

\begin_layout Itemize
what I did about it
\end_layout

\begin_layout Itemize
how is what I've done better than what was done before
\end_layout

\begin_layout Itemize
small TOC
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
::= and -> : explain difference !
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Preliminaries
\end_layout

\begin_layout Standard
In this chapter, we define some terms we will use throughout the document.
\end_layout

\begin_layout Section
Context-free grammars
\end_layout

\begin_layout Definition
A context-free grammar (CFG) is a triple 
\begin_inset Formula $(V,T,P)$
\end_inset

 such that
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $V$
\end_inset

 is a finite set of variables,
\end_layout

\begin_layout Itemize
\begin_inset Formula $T$
\end_inset

 is a finite set of terminals,
\end_layout

\begin_layout Itemize
\begin_inset Formula $P\subset V\times(V\cup T)^{*}$
\end_inset

 is a finite set of production rules.
 We write 
\begin_inset Formula $X\to\alpha$
\end_inset

 iff 
\begin_inset Formula $(X,\alpha)\in P$
\end_inset

.
 For each variable 
\begin_inset Formula $X\in V$
\end_inset

, there exists at least one production rule 
\begin_inset Formula $X\to\alpha$
\end_inset

 in 
\begin_inset Formula $P$
\end_inset

, i.e.
\begin_inset Formula 
\[
\forall X\in V,\,\exists\alpha\in\left(V\cup T\right)^{*}:\,\left(X,\alpha\right)\in P.
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
Now we define the different types of words.
\end_layout

\begin_layout Definition
A variable word denotes a finite sequence of variables 
\begin_inset Formula $w_{V}\in V^{*}$
\end_inset

, and a terminal word denotes a finite sequence of terminals 
\begin_inset Formula $w_{T}\in T^{*}$
\end_inset

.
\end_layout

\begin_layout Standard
Next, we define the producibility relation.
\end_layout

\begin_layout Definition
If a terminal word 
\begin_inset Formula $w_{T}\in T^{+}$
\end_inset

 can be produced from a variable word 
\begin_inset Formula $w_{V}\in V^{+}$
\end_inset

, then we write 
\begin_inset Formula $w_{V}\to^{*}w_{T}$
\end_inset

.
\end_layout

\begin_layout Standard
An important property of variables is the length of its shortest producible
 word.
 We define a function to calculate this property.
\end_layout

\begin_layout Definition
The variable norm is a function 
\begin_inset Formula $\norm{\cdot}_{1}:V\to\left(\mathbb{N}\cup\left\{ \infty\right\} \right)$
\end_inset

.
 Given a variable 
\begin_inset Formula $X\in V$
\end_inset

, 
\begin_inset Formula $\norm X_{1}$
\end_inset

 equals the length of the shortest terminal word 
\begin_inset Formula $w\in T^{+}$
\end_inset

 which can be produced from 
\begin_inset Formula $X$
\end_inset

, or 
\begin_inset Formula $\infty$
\end_inset

 if no such word exists, i.e.
\begin_inset Formula 
\[
\norm X_{1}:=\inf\left\{ \left|w\right||X\to^{*}w\right\} .
\]

\end_inset

We extend the norm function to finite sequences of variables, where 
\begin_inset Formula $X\in V$
\end_inset

 and 
\begin_inset Formula $\alpha\in V^{*}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\norm{\varepsilon} & :=0;\\
\norm{X\alpha} & :=\norm X_{1}+\norm{\alpha}.
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
The following lemma is an obvious conclusion.
\end_layout

\begin_layout Lemma
\begin_inset Formula $\norm{AB}=\norm A+\norm B.$
\end_inset


\end_layout

\begin_layout Definition
A grammar is normed iff all its variables produce at least one finite word,
 i.e.
\begin_inset Formula 
\[
\forall i:\,\norm{X_{i}}\neq\infty.
\]

\end_inset


\end_layout

\begin_layout Standard
In the course of this document, we assume all grammars to be normed.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Why?
\end_layout

\end_inset


\end_layout

\begin_layout Definition
A grammar 
\begin_inset Formula $G$
\end_inset

 is in Greibach normal form (GNF) iff each production rule has the form
 
\begin_inset Formula $X\to a\alpha$
\end_inset

, where 
\begin_inset Formula $X\in V$
\end_inset

, 
\begin_inset Formula $a\in T$
\end_inset

 and 
\begin_inset Formula $\alpha\in V^{*}$
\end_inset

.
 If the length of the longest 
\begin_inset Formula $\alpha$
\end_inset

 is 
\begin_inset Formula $k$
\end_inset

, then 
\begin_inset Formula $G$
\end_inset

 is in 
\begin_inset Formula $k$
\end_inset

-GNF.
\end_layout

\begin_layout Theorem
For each CFG, we can actually always find an equivalent grammar in 2-GNF,
 which is called second normal form.
\begin_inset Note Note
status open

\begin_layout Plain Layout
Source!
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
Write later in the article if 2-GNF is of any use.
\end_layout

\end_inset


\end_layout

\begin_layout Proof
See 
\begin_inset CommandInset citation
LatexCommand cite
key "harrison1978"

\end_inset

.
\end_layout

\begin_layout Example
\begin_inset CommandInset label
LatexCommand label
name "Example-grammar"

\end_inset

Consider the following grammar:
\begin_inset Formula 
\begin{align*}
X & \to aX+bZ\\
Y & \to bZZ+aX\\
Z & \to c
\end{align*}

\end_inset

To visualise it, we may construct a production graph as in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Production-graph"

\end_inset

:
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[->, node distance = 2cm, auto]
\end_layout

\begin_layout Plain Layout

  
\backslash
node (X)                 {$X$};
\end_layout

\begin_layout Plain Layout

  
\backslash
node (Y)  [right of = X] {$Y$};
\end_layout

\begin_layout Plain Layout

  
\backslash
node (Z)  [below of = X] {$Z$};
\end_layout

\begin_layout Plain Layout

  
\backslash
node (ZZ) [right of = Z] {$ZZ$};
\end_layout

\begin_layout Plain Layout

  
\backslash
node (e)  [below of = Z] {$
\backslash
varepsilon$};
\end_layout

\begin_layout Plain Layout

  
\backslash
path (X)  edge[loop above] node {$a$} (X)
\end_layout

\begin_layout Plain Layout

             edge             node {$b$} (Z)
\end_layout

\begin_layout Plain Layout

        (Y)  edge             node {$a$} (X)
\end_layout

\begin_layout Plain Layout

             edge             node {$b$} (ZZ)
\end_layout

\begin_layout Plain Layout

        (Z)  edge             node {$c$} (e)
\end_layout

\begin_layout Plain Layout

        (ZZ) edge             node {$b$} (Z);
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Production-graph"

\end_inset

Production graph for example grammar.
\end_layout

\end_inset


\end_layout

\end_inset

 In this graph, we can interpret the paths from each variable sequence 
\begin_inset Formula $w_{V}\in V^{+}$
\end_inset

 to 
\begin_inset Formula $\varepsilon$
\end_inset

 as set of terminal words produced by 
\begin_inset Formula $w_{V}$
\end_inset

.
 Furthermore, the length of the shortest path from 
\begin_inset Formula $w_{V}$
\end_inset

 to 
\begin_inset Formula $\varepsilon$
\end_inset

 is equivalent to 
\begin_inset Formula $\norm{w_{V}}$
\end_inset

.
 For example, 
\begin_inset Formula $\norm X=2$
\end_inset

, 
\begin_inset Formula $\norm Y=3$
\end_inset

 and 
\begin_inset Formula $\norm Z=1$
\end_inset

.
 Also, among others, 
\begin_inset Formula $Y\to^{*}bbc$
\end_inset

 and 
\begin_inset Formula $Y\to^{*}aa^{*}bc$
\end_inset

 hold.
\end_layout

\begin_layout Section
Simple deterministic grammars
\end_layout

\begin_layout Definition
A simple deterministic grammar (or simple context-free grammar), short SDG,
 is a context-free grammar in Greibach normal form, with the condition that
 for each variable 
\begin_inset Formula $X\in V$
\end_inset

 and each 
\begin_inset Formula $a\in T$
\end_inset

, there exists at most one rule 
\begin_inset Formula $X\to a\alpha$
\end_inset

 in 
\begin_inset Formula $P$
\end_inset

.
\end_layout

\begin_layout Standard
Simple deterministic grammars are a subclass of context-free grammars; in
 fact, the relation between several language classes is 
\begin_inset Formula 
\[
\mathcal{L}(\mathrm{SIMPLE})\subset\mathcal{L}(LL(1))\subset\dots\subset\mathcal{L}(LL(k))\subset\dots\subset\mathcal{L}(\mathrm{DETCF})\subset\mathcal{L}(\mathrm{CF}),
\]

\end_inset

where 
\begin_inset Formula $\mathrm{DETCF}$
\end_inset

 denotes deterministic context-free grammars and 
\begin_inset Formula $\mathrm{CF}$
\end_inset

 denotes context-free grammars.
\begin_inset Note Note
status open

\begin_layout Plain Layout
Source!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Where simple deterministic grammars can potentially produce a set of several
 different terminal words 
\begin_inset Formula $W_{T}\subset T^{+}$
\end_inset

, we also looked at the special case of SDGs where each variable 
\begin_inset Formula $X\in V$
\end_inset

 produces only one single terminal word 
\begin_inset Formula $w\in T^{+}$
\end_inset

.
\end_layout

\begin_layout Definition
A compression grammar is a simple deterministic grammar, with the condition
 that for each variable 
\begin_inset Formula $X\in V$
\end_inset

, there exists at most one terminal 
\begin_inset Formula $a\in T$
\end_inset

 such that 
\begin_inset Formula $X\to a\alpha$
\end_inset

 is in 
\begin_inset Formula $P$
\end_inset

.
\end_layout

\begin_layout Standard
Note that while we can only produce one single terminal word with each variable
 of a compression grammar, the norm of the variable is still potentially
 exponential in the number of variables.
\end_layout

\begin_layout Example
Insert pretty compression example here.
 :)
\end_layout

\begin_layout Section
Polynomials
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Why is this non-standard? Why do we need them? Why do we talk about them?
 Proof system!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Given a set of variables 
\begin_inset Formula $V=\left\{ X_{1},\dots,X_{n}\right\} $
\end_inset

 and a set of terminals 
\begin_inset Formula $T=\left\{ a_{1},\dots,a_{m}\right\} $
\end_inset

, we define polynomials over 
\begin_inset Formula $\left(V,T\right)$
\end_inset

 with the following Backus-Naur form (BNF), 
\begin_inset Formula $P$
\end_inset

 being the start symbol:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align*}
P & ::=V\:|\: T\:|\: P+P\:|\: P\cdot P\\
V & ::=X_{1}\:|\:\dots\:|\: X_{n}\\
T & ::=a_{1}\:|\:\dots\:|\: a_{m}
\end{align*}

\end_inset

Properties of polynomials:
\end_layout

\begin_layout Itemize
Commutativity: 
\begin_inset Formula $x+y=y+x$
\end_inset


\end_layout

\begin_layout Itemize
Associativity: 
\begin_inset Formula $\left(x+y\right)+z=x+\left(y+z\right)$
\end_inset

, 
\begin_inset Formula $\left(x\cdot y\right)\cdot z=x\cdot\left(y\cdot z\right)$
\end_inset


\end_layout

\begin_layout Itemize
Distributivity: 
\begin_inset Formula $\left(x+y\right)\cdot z=x\cdot z+y\cdot z$
\end_inset


\end_layout

\begin_layout Section
Proof system (Sénizergues)
\end_layout

\begin_layout Standard
In this section, we introduce a system to prove equivalence of simple-determinis
tic grammars.
 It is based on a similar proof system by Sénizergues
\begin_inset Note Note
status open

\begin_layout Plain Layout
reference!
\end_layout

\end_inset

, which can be used to prove equivalence of strict-deterministic context-free
 grammars.
\end_layout

\begin_layout Definition
Let 
\begin_inset Formula $G=(V,T,P)$
\end_inset

 be a context-free grammar and 
\begin_inset Formula $\mathcal{P}$
\end_inset

 the set of polynomials over variables 
\begin_inset Formula $V$
\end_inset

 and terminals 
\begin_inset Formula $T$
\end_inset

.
 Based on this, we define the set of judgements as 
\begin_inset Formula $\mathcal{J}\subset\mathcal{P}\times\mathcal{P}$
\end_inset

.
\end_layout

\begin_layout Standard
With this definition in place, we now define equivalence proofs:
\end_layout

\begin_layout Definition
Let 
\begin_inset Formula $G$
\end_inset

 be a context-free grammar.
 We call 
\begin_inset Formula $G$
\end_inset

-equivalence proof every finite set of rules 
\begin_inset Formula $\mathcal{R}$
\end_inset

 such that
\begin_inset Formula 
\begin{equation}
\forall r_{1}\in\mathcal{R},\,\forall r_{2}\in\mathcal{R}:\,\Prem{r_{1}}=\Prem{r_{2}}\iff r_{1}=r_{2},
\end{equation}

\end_inset


\begin_inset Formula 
\begin{equation}
\forall r\in\mathcal{R},\,\forall p\in\Prem j,\,\exists r_{p}\in\mathcal{R}:\,\left[p=\Concl{r_{p}}\land r\notin\Premstartimes{r_{p}}\right].
\end{equation}

\end_inset

In this context, we define
\begin_inset Formula 
\[
\Premstartimes r:=\begin{cases}
\emptyset & r=\bussproof{\binaryinfc{\axiomc{P_{1}}}{\axiomc{P_{2}}}C{\ensuremath{\times}}};\\
r\cup\bigcup_{\begin{aligned}r_{p} & \in\mathcal{R},\\
\Concl{r_{p}} & \in\Prem r
\end{aligned}
}\Premstartimes{r_{p}} & \mathrm{else}.
\end{cases}
\]

\end_inset


\end_layout

\begin_layout Standard
Schemes of rules:
\begin_inset Note Note
status open

\begin_layout Plain Layout
Indentation check!
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Symmetry: 
\begin_inset Formula $\bussproof{\syminf xy{\axiom yx}}$
\end_inset


\end_layout

\begin_layout Itemize
Transitivity: 
\begin_inset Formula $\bussproof{\transinf xz{\axiom xy}{\axiom yz}}$
\end_inset


\end_layout

\begin_layout Itemize
Sum: 
\begin_inset Formula $\bussproof{\plusinf{x+y}{x'+y'}{\axiom x{x'}}{\axiom y{y'}}}$
\end_inset


\end_layout

\begin_layout Standard
Schemes of strict rules:
\end_layout

\begin_layout Itemize
Reflexivity: 
\begin_inset Formula $\bussproof{\refl xx}$
\end_inset


\end_layout

\begin_layout Itemize
Product: 
\begin_inset Formula $\bussproof{\timesinf{x\cdot y}{x'\cdot y'}{\axiom x{x'}}{\axiom y{y'}}}$
\end_inset


\end_layout

\begin_layout Standard
Strict rules:
\end_layout

\begin_layout Itemize
Grammar: 
\begin_inset Formula $\bussproof{\gr X{\Gr X}}$
\end_inset


\end_layout

\begin_layout Standard
For each rule 
\begin_inset Formula $\unrulec{P_{1}\dots P_{n}}C{rule}$
\end_inset

, we have that 
\begin_inset Formula $\forall i:\,\norm{P_{i}}\leq\norm C$
\end_inset

.
 For strict rules, we even have 
\begin_inset Formula $\forall i:\,\norm{P_{i}}<\norm C$
\end_inset

.
\end_layout

\begin_layout Definition
Given two variable words 
\begin_inset Formula $w_{1},w_{2}\in V^{+}$
\end_inset

, we call 
\begin_inset Formula $w\in\left(V\cup T\right)^{+}$
\end_inset

 a witness of non-equivalence of 
\begin_inset Formula $w_{1}$
\end_inset

and 
\begin_inset Formula $w_{2}$
\end_inset

 if
\begin_inset Formula 
\[
w\in\left[\mathcal{L}(w_{2})\backslash\mathcal{L}(w_{1})\right]\cup\left[\mathcal{L}(w_{1})\backslash\mathcal{L}(w_{2})\right].
\]

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
Does there always exist a 
\begin_inset Formula $w$
\end_inset

 of non-exponential length?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
algebra, equality, soundness/completeness
\end_layout

\end_inset


\end_layout

\begin_layout Example
Consider the following rules:
\begin_inset Formula 
\[
\bussproof{\syminf XY{\syminf YX{\axiom XY}}}
\]

\end_inset

This is obviously an invalid proof, as it would allow us to show the equivalence
 of two variables independently of the grammar.
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: this is unclear, write sj over X=Y.
 Explain sj!
\end_layout

\end_inset


\end_layout

\begin_layout Example
\begin_inset Note Note
status open

\begin_layout Plain Layout
Write about induction.
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Example
Given the grammar 
\begin_inset Formula $G$
\end_inset

 with production rules 
\begin_inset Formula 
\begin{align*}
X & \to a+bX\\
Y & \to a+bY,
\end{align*}

\end_inset

the following is a valid proof:
\begin_inset Formula 
\[
\bussproof{\transinf XY{\gr X{a+bX}}{\syminf{a+bX}Y{\transinf Y{a+bX}{\gr Y{a+bY}}{\plusinf{a+bY}{a+bX}{\refl aa}{\timesinf{bY}{bX}{\refl bb}{\syminf YX{\sj XY}}}}}}}
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
We note that in both proofs above, we have a certain circularity, as 
\begin_inset Formula $X\equiv Y$
\end_inset

 appears once in a conclusion and once in a premise following from the conclusio
n.
 This circularity obviously leads to a contradiction for the first proof,
 whereas we claim that the second proof is correct.
 Why?
\end_layout

\begin_layout Standard
To show that the second proof is correct, let us assume that 
\begin_inset Formula $X\not\equiv Y$
\end_inset

.
 Then by definition there exists a smallest witness of non-equivalence of
 
\begin_inset Formula $X$
\end_inset

 and 
\begin_inset Formula $Y$
\end_inset

, 
\begin_inset Formula $w_{W}\in T^{+}$
\end_inset

.
 However, following the path from the conclusion 
\begin_inset Formula $X\equiv Y$
\end_inset

 to the premise 
\begin_inset Formula $X\equiv Y$
\end_inset

, we could find a smaller witness of non-equivalence, as there exists no
 rule which increases the norm when going from a conclusion to a premise,
 but there exists a rule which decreases the norm --- the product rule.
 As we than have a smaller witness of non-equivalence than 
\begin_inset Formula $w_{W}$
\end_inset

, this contradicts the fact that 
\begin_inset Formula $w_{W}$
\end_inset

 is the smallest witness.
 From this contradiction it follows that 
\begin_inset Formula $X\equiv Y$
\end_inset

 indeed holds.
\end_layout

\begin_layout Standard
We now generalise the argument employed in the example above.
\end_layout

\begin_layout Theorem
The proof system in definition ?? is sound.
\end_layout

\begin_layout Proof
TODO!
\end_layout

\begin_layout Theorem
The proof system in definition ?? is complete.
\end_layout

\begin_layout Proof
TODO!
\end_layout

\begin_layout Chapter
Restrictions
\end_layout

\begin_layout Section
Restricted SDGs
\end_layout

\begin_layout Standard
For the proof construction algorithms presented in this document, we impose
 several conditions on employed SDG grammar 
\begin_inset Formula $G=\left(V,T,P\right)$
\end_inset

:
\end_layout

\begin_layout Itemize
\begin_inset Formula $G$
\end_inset

 must be normed.
\end_layout

\begin_layout Itemize
\begin_inset Formula $V=\left\{ X_{1},\dots,X_{n}\right\} $
\end_inset

, where 
\begin_inset Formula $X_{1}$
\end_inset

 to 
\begin_inset Formula $X_{n}$
\end_inset

 are ordered by ascending norm, i.e.
\begin_inset Formula 
\[
\forall i:\,1\leq i<n\implies\norm{X_{i}}\leq\norm{X_{i+1}}.
\]

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $P=\left\{ X_{i}\to a_{i,j}\alpha_{i,j}|a_{i,j}\in T\land\alpha_{i,j}\in V^{*}\right\} $
\end_inset

, where the number of productions for 
\begin_inset Formula $X_{i}$
\end_inset

 is 
\begin_inset Formula $p_{i}$
\end_inset

, then
\begin_inset Formula 
\[
\forall i\forall k:\,1<k\leq p_{i}\implies\norm{\alpha_{i,1}}\leq\norm{\alpha_{i,k}}.
\]

\end_inset


\end_layout

\begin_layout Itemize
There exists a function 
\begin_inset Formula $v:T\to V$
\end_inset

 which associates each terminal 
\begin_inset Formula $a\in T$
\end_inset

 to a variable 
\begin_inset Formula $X\in V$
\end_inset

 such that there exists exactly one production rule for 
\begin_inset Formula $X$
\end_inset

 in 
\begin_inset Formula $P$
\end_inset

 with 
\begin_inset Formula $X\to a$
\end_inset

, i.e.
\begin_inset Formula 
\[
\forall a\in T,\,\exists X\in V:\,\left[\exists!\alpha:\,\left(X,\alpha\right)\in P\right]\land\left(X,a\right)\in P.
\]

\end_inset


\end_layout

\begin_layout Example
We consider the grammar from example 
\begin_inset CommandInset ref
LatexCommand formatted
reference "Example-grammar"

\end_inset

.
 First, we note that for the terminals 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

, there exist no dedicated variables, so we add
\begin_inset Formula 
\begin{align*}
A & \to a\\
B & \to b
\end{align*}

\end_inset

to the grammar.
 At this point, we write down all variables with their production rules
 ordered by ascending norm, i.e.
\begin_inset Formula 
\begin{align*}
A & \to a\\
B & \to b\\
Z & \to c\\
X & \to aX+bZ\\
Y & \to bZZ+aX
\end{align*}

\end_inset

Now we need to verify whether the first production rule of each variable
 has the smallest norm of all production rules for this variable.
 As 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

 and 
\begin_inset Formula $Z$
\end_inset

 only have one production rule, the property obviously holds for these variables
, but what about 
\begin_inset Formula $X$
\end_inset

 and 
\begin_inset Formula $Y$
\end_inset

? Looking at the production rules of 
\begin_inset Formula $X$
\end_inset

, we note that 
\begin_inset Formula $\norm X=2$
\end_inset

 and 
\begin_inset Formula $\norm Z=1$
\end_inset

, so the property does not hold for 
\begin_inset Formula $X$
\end_inset

, which we fix by changing the order of the production rules of 
\begin_inset Formula $X$
\end_inset

.
 For 
\begin_inset Formula $Y$
\end_inset

, though, the property holds, as 
\begin_inset Formula $\norm{ZZ}=\norm X=2$
\end_inset

.
 The intermediary result after this transformation step, where we only changed
 the order of production rules of 
\begin_inset Formula $X$
\end_inset

, is:
\begin_inset Formula 
\begin{align*}
A & \to a\\
B & \to b\\
Z & \to c\\
X & \to bZ+aX\\
Y & \to bZZ+aX
\end{align*}

\end_inset

After renaming the variables, the final grammar is:
\begin_inset Formula 
\begin{align*}
X_{1} & \to a\\
X_{2} & \to b\\
X_{3} & \to c\\
X_{4} & \to bX_{3}+aX_{4}\\
X_{5} & \to bX_{3}X_{3}+aX_{4}
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
The restricted form of SDGs also allows us to calculate the norm of each
 variable easily in an inductive way:
\begin_inset Formula 
\[
\norm{X_{j}}=\begin{cases}
1+\sum_{X_{k}\in\alpha_{j,1}}\norm{X_{k}} & \forall X_{k}\in\alpha_{j,1}:\, k<j;\\
\bot & \text{else}.
\end{cases}
\]

\end_inset

In addition to then checking that the variables are sorted by ascending
 norm, we have to verify that the first production rule of each variable
 produces the smallest terminal word among all production rules of the variable;
 i.e.
 
\begin_inset Formula 
\[
\forall X_{j}\in V:\,\forall i:\,\left(\forall X_{k}\in\alpha_{j,i}:\, k<j\right)\implies\left(\sum_{X_{k}\in\alpha_{j,i}}\norm{X_{k}}\right)\geq\norm{X_{j}}.
\]

\end_inset


\end_layout

\begin_layout Section
Restricted polynomials
\end_layout

\begin_layout Standard
To reduce the number of proof construction rules and to simplify checking
 if two polynomials are equivalent, we institute a restricted class of polynomia
ls with the following BNF, 
\begin_inset Formula $I$
\end_inset

 being the start symbol:
\begin_inset Formula 
\begin{align*}
I & ::=P\:|\: S\\
P & ::=V\:|\: V\cdot P\\
S & ::=S+S\:|\: T\:|\: T\cdot P\\
V & ::=X_{1}\:|\:\dots\:|\: X_{n}\\
T & ::=a_{1}\:|\:\dots\:|\: a_{m}
\end{align*}

\end_inset

In a nutshell, a restricted polynomial is:
\end_layout

\begin_layout Itemize
a product of variables, or
\end_layout

\begin_layout Itemize
a sum of terms, where each term is either:
\end_layout

\begin_deeper
\begin_layout Itemize
a terminal or
\end_layout

\begin_layout Itemize
the concatenation of a terminal with a product of variables.
\end_layout

\end_deeper
\begin_layout Definition
Two restricted polynomials 
\begin_inset Formula $p_{1}$
\end_inset

, 
\begin_inset Formula $p_{2}$
\end_inset

 are equivalent iff:
\end_layout

\begin_layout Itemize
\begin_inset Formula $p_{1}$
\end_inset

 and 
\begin_inset Formula $p_{2}$
\end_inset

 are syntactically equivalent products of variables, i.e.
 
\begin_inset Formula $p_{1}=p_{2}=\prod_{x=1}^{n_{A}}A_{x}$
\end_inset

, or
\end_layout

\begin_layout Itemize
\begin_inset Formula $p_{1}$
\end_inset

 and 
\begin_inset Formula $p_{2}$
\end_inset

 are sums of terms, where the number of addends in 
\begin_inset Formula $p_{1}$
\end_inset

 and 
\begin_inset Formula $p_{2}$
\end_inset

 is equal and for each addend of 
\begin_inset Formula $p_{1}$
\end_inset

 there exists an equivalent addend in 
\begin_inset Formula $p_{2}$
\end_inset

, i.e.
 
\begin_inset Formula $p_{1}=\sum_{x=1}^{n_{A}}a_{x}A_{x}$
\end_inset

, 
\begin_inset Formula $p_{2}=\sum_{y=1}^{n_{B}}b_{y}B_{y}$
\end_inset

, 
\begin_inset Formula $n_{A}=n_{B}$
\end_inset

 and 
\begin_inset Formula $\forall x\,\exists!y:\, a_{x}=b_{y}\land A_{x}=B_{y}$
\end_inset

.
\end_layout

\begin_layout Standard
Valid restricted polynomials over the variables 
\begin_inset Formula $V=\left\{ X_{1},\dots,X_{4}\right\} $
\end_inset

 and terminals 
\begin_inset Formula $T=\left\{ a,b,c,d\right\} $
\end_inset

 include for example:
\end_layout

\begin_layout Itemize
\begin_inset Formula $b$
\end_inset

,
\end_layout

\begin_layout Itemize
\begin_inset Formula $X_{3}X_{2}$
\end_inset

,
\end_layout

\begin_layout Itemize
\begin_inset Formula $a+bX_{2}$
\end_inset

.
\end_layout

\begin_layout Standard
Expressions which are 
\emph on
not
\emph default
 valid polynomials over the same 
\begin_inset Formula $V$
\end_inset

 and 
\begin_inset Formula $T$
\end_inset

 include:
\end_layout

\begin_layout Itemize
\begin_inset Formula $X_{1}+X_{2}$
\end_inset

, because the addends start with a variable;
\end_layout

\begin_layout Itemize
\begin_inset Formula $a+X_{4}$
\end_inset

, because the second addend starts with a variable;
\end_layout

\begin_layout Itemize
\begin_inset Formula $abX_{2}+cX_{3}$
\end_inset

, because the first addend starts with multiple terminals instead of only
 one;
\end_layout

\begin_layout Itemize
\begin_inset Formula $a\left(a+bX_{1}cX_{2}\left(c+dX_{3}+e\right)\right)+dX_{4}$
\end_inset

, because the first addend is a concatenation of a terminal with a sum;
\end_layout

\begin_layout Itemize
\begin_inset Formula $e+fX_{5}$
\end_inset

, because neither 
\begin_inset Formula $e$
\end_inset

, 
\begin_inset Formula $f$
\end_inset

 nor 
\begin_inset Formula $X_{5}$
\end_inset

 are in 
\begin_inset Formula $V\cup T$
\end_inset

.
\end_layout

\begin_layout Chapter
Existing algorithms
\end_layout

\begin_layout Standard
Here we present 
\begin_inset CommandInset citation
LatexCommand cite
key "hirshfeld1996"

\end_inset

 and explain related concepts, such as a Caucal base.
 Also refer to 
\begin_inset CommandInset citation
LatexCommand cite
key "lasota2006"

\end_inset

.
\end_layout

\begin_layout Definition
Norm reduction function.
\begin_inset Formula 
\begin{align*}
\left[\alpha\right]_{0} & =\alpha;\\
\left[X_{i}\alpha\right]_{p} & =\begin{cases}
\left[\alpha\right]_{p-\norm{X_{i}}} & p\geq\norm{X_{i}};\\
\left[\alpha_{i1}\right]_{p-1}\alpha & p<\norm{X_{i}}.
\end{cases}
\end{align*}

\end_inset


\end_layout

\begin_layout Chapter
Proof construction strategies
\end_layout

\begin_layout Standard
In this chapter, we present several options to construct equivalence proofs
 of SDGs.
\end_layout

\begin_layout Section
Adaptation of existing algorithms
\end_layout

\begin_layout Section
Base replacement
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{gather*}
\norm{A_{1}}>\norm{B_{1}},\\
R=B_{1}\left[A_{1}\right]_{\norm{B_{1}}}\implies\\
\bussproof{\transinf{\prod_{x=1}^{n_{A}\geq1}A_{x}}{\prod_{y=1}^{n_{B}>1}B_{y}}{\axiom{\prod A_{x}}{R\prod_{x=2}^{n_{A}}A_{x}}}{\axiom{R\prod_{x=2}^{n_{A}}A_{x}}{\prod B_{y}}}}
\end{gather*}

\end_inset


\end_layout

\begin_layout Lemma
The base-replacement algorithm may produce proofs of exponential size.
\end_layout

\begin_layout Proof
We consider the grammar given in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:AB-grammar-non2NF"

\end_inset

, which is a slightly adapted version of the grammar given in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:AB-grammar-2NF"

\end_inset

.
 
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $A\rightarrow a$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $B\rightarrow b$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $A_{B}^{0}\rightarrow aB$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $A_{B}^{n+1}\rightarrow aBA_{B}^{n}A_{B}^{n}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $F^{n}\rightarrow aBA_{B}^{n}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $A\rightarrow a$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $B\rightarrow b$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $B_{A}^{0}\rightarrow bA$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $B_{A}^{n+1}\rightarrow bAB_{A}^{n}B_{A}^{n}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $G^{n}\rightarrow aB_{A}^{n}B$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:AB-grammar-non2NF"

\end_inset


\begin_inset Formula $F^{n}\equiv G^{n}$
\end_inset

.
 
\begin_inset Formula $\norm{F_{n}}=\norm{G_{n}}=2^{n+2}$
\end_inset

.
\end_layout

\end_inset


\end_layout

\end_inset

To prove that 
\begin_inset Formula $F^{n}\equiv G^{n}$
\end_inset

, we start as follows:
\begin_inset Formula 
\[
\bussproof{\grstar{F^{n}}{G^{n}}{\timesstarinf{aBA_{B}^{n}}{aB_{A}^{n}B}{\axiom{BA_{B}^{n}}{B_{A}^{n}B}}}}
\]

\end_inset

After this initial step, the base replacement algorithm dictates that we
 must continuously apply the proof schemes given in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Proof-schemes-base-replacement"

\end_inset

, until we have to apply the reflexivity rule at the very end of the proof.
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Formula $\bussproof{\grstar{BA_{B}^{n+1}X}{B_{A}^{n+1}YB}{\timesstarinf{BA_{B}^{n+1}X}{bAB_{A}^{n}B_{A}^{n}YB}{\grstar{A_{B}^{n+1}X}{AB_{A}^{n}B_{A}^{n}YB}{\timesstarinf{aBA_{B}^{n}A_{B}^{n}X}{AB_{A}^{n}B_{A}^{n}YB}{\axiom{BA_{B}^{n}A_{B}^{n}X}{B_{A}^{n}B_{A}^{n}YB}}}}}}$
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset Formula $\bussproof{\grstar{BA_{B}^{0}X}{B_{A}^{0}YB}{\timesstarinf{BA_{B}^{0}X}{bAYB}{\grstar{A_{B}^{0}X}{AYB}{\timesstarinf{aBX}{AYB}{\axiom{BX}{YB}}}}}}$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Proof-schemes-base-replacement"

\end_inset

Proof schemes for base replacement algorithm.
\end_layout

\end_inset


\end_layout

\end_inset

 We note that in both proof schemes, the norm of the last equality is by
 two smaller than the norm of the first equality, which means that we have
 to apply the proof schemes a number of times linear in the norm of the
 original equivalence.
 As the norm is exponential in the number of variables, we obtain a proof
 of exponential size.
\end_layout

\begin_layout Section
Decomposition
\end_layout

\begin_layout Standard
The decomposition function is a partial function from 
\begin_inset Formula $\left(V^{*},\mathbb{N}\right)$
\end_inset

 to 
\begin_inset Formula $V^{*}$
\end_inset

.
\end_layout

\begin_layout Definition
Decomposition function.
\begin_inset Formula 
\begin{align*}
\left\langle \alpha\right\rangle _{0} & =\varepsilon;\\
\left\langle X_{i}\alpha\right\rangle _{t} & =\begin{cases}
V_{a_{i1}} & t=1\land\Gr{X_{i}}=a_{i1}\alpha_{i1};\\
V_{a_{i1}}\left\langle \alpha_{i1}\right\rangle _{t-1} & 1<t<\norm{X_{i}}\land\Gr{X_{i}}=a_{i1}\alpha_{i1};\\
X_{i}\left\langle \alpha\right\rangle _{t-\norm{X_{i}}} & \norm{X_{i}}\leq t\leq\norm{X_{i}\alpha};\\
\bot & \mathrm{else}.
\end{cases}
\end{align*}

\end_inset

Properties:
\end_layout

\begin_layout Theorem
Decomposition has several properties:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\left\langle \alpha\right\rangle _{\norm{\alpha}}=\alpha$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\length{\left\langle \alpha\right\rangle _{t}}\leq\left(j-1\right)k+\length{\alpha}$
\end_inset

, where 
\begin_inset Formula $j$
\end_inset

 denotes the maximal index among all variables in 
\begin_inset Formula $\alpha$
\end_inset

 (or 
\begin_inset Formula $j=1$
\end_inset

 if 
\begin_inset Formula $\alpha=\varepsilon$
\end_inset

).
\end_layout

\begin_layout Enumerate
If 
\begin_inset Formula $\left\langle \alpha\right\rangle _{t}\neq\bot$
\end_inset

, then 
\begin_inset Formula $\left\langle \alpha\right\rangle _{t}\left[\alpha\right]_{t}\equiv\alpha$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Proof
We prove one by one:
\end_layout

\begin_deeper
\begin_layout Enumerate
We prove 
\begin_inset Formula $\left\langle \alpha\right\rangle _{\norm{\alpha}}=\alpha$
\end_inset

 by induction on 
\begin_inset Formula $\alpha$
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\alpha=\varepsilon$
\end_inset

: 
\begin_inset Formula $\left\langle \alpha\right\rangle _{\norm{\alpha}}=\left\langle \varepsilon\right\rangle _{0}=\varepsilon.$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\alpha=X_{i}\beta$
\end_inset

: 
\begin_inset Formula $\left\langle \alpha\right\rangle _{\norm{\alpha}}=\left\langle X_{i}\beta\right\rangle _{\norm{X_{i}\beta}}=X_{i}\left\langle \beta\right\rangle _{\norm{\beta}}\overset{\text{ind.}}{=}X_{i}\beta.$
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
We prove 
\begin_inset Formula $\length{\left\langle \alpha\right\rangle _{t}}\leq\left(j-1\right)k+\length{\alpha}$
\end_inset

 by induction on 
\begin_inset Formula $t$
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $t=0$
\end_inset

:
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\length{\left\langle \alpha\right\rangle _{t}}=0$
\end_inset

.
 As 
\begin_inset Formula $j$
\end_inset

 is minimally 
\begin_inset Formula $1$
\end_inset

 and 
\begin_inset Formula $k$
\end_inset

 minimally 
\begin_inset Formula $0$
\end_inset

, we have that 
\begin_inset Formula $\left(j-1\right)k+\length{\alpha}\geq0$
\end_inset

.
 It follows that 
\begin_inset Formula $\length{\left\langle \alpha\right\rangle _{t}}\leq\left(j-1\right)k+\length{\alpha}$
\end_inset

 holds.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $t>0$
\end_inset

: We set 
\begin_inset Formula $\alpha=X_{i}\beta$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $t=1\land\Gr{X_{i}}=a_{i1}\alpha_{i1}$
\end_inset

:
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\length{\left\langle \alpha\right\rangle _{t}}=\length{V_{a_{i1}}}=1\leq\overbrace{\left(j-1\right)k}^{\geq0}+\overbrace{\length{\alpha}}^{\geq1}$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $1<t<\norm{X_{i}}\land\Gr{X_{i}}=a_{i1}\alpha_{i1}$
\end_inset

:
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\length{\left\langle \alpha\right\rangle _{t}}=\length{V_{a_{i1}}\left\langle \alpha_{i1}\right\rangle _{t-1}}=1+\length{\left\langle \alpha_{i1}\right\rangle _{t-1}}\overset{\text{ind.}}{\leq}1+\left(i-1-1\right)k+k=1+\left(i-1\right)k\leq\left(i-1\right)k+\length{\alpha}.$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\norm{X_{i}}\leq t\leq\norm{X_{i}\beta}$
\end_inset

:
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\length{\left\langle \alpha\right\rangle _{t}}=\length{X_{i}\left\langle \beta\right\rangle _{t-\norm{X_{i}}}}=1+\length{\left\langle \beta\right\rangle _{t-\norm{X_{i}}}}\overset{\text{ind.}}{\leq}1+\left(j-1\right)k+\overbrace{\length{\alpha}-1}^{\length{\beta}}=\left(j-1\right)k+\length{\alpha}$
\end_inset

.
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
If 
\begin_inset Formula $\left\langle \alpha\right\rangle _{t}\neq\bot$
\end_inset

, then 
\begin_inset Formula $\left\langle \alpha\right\rangle _{t}\left[\alpha\right]_{t}\equiv\alpha$
\end_inset

.
 We prove this by induction on 
\begin_inset Formula $t$
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $t=0$
\end_inset

: 
\begin_inset Formula $\left\langle \alpha\right\rangle _{0}\left[\alpha\right]_{0}=\varepsilon\cdot\alpha\equiv\alpha$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $t>0$
\end_inset

: We set 
\begin_inset Formula $\alpha=X_{i}\beta$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $t=1\land\Gr{X_{i}}=a_{i1}\alpha_{i1}$
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $t\geq\norm{X_{i}}$
\end_inset

: It follows that 
\begin_inset Formula $\norm{X_{i}}=1$
\end_inset

, therefore 
\begin_inset Formula $\Gr{X_{i}}=a_{i1}$
\end_inset

 and 
\begin_inset Formula $\left\langle \alpha\right\rangle _{1}\left[\alpha\right]_{1}=\underbrace{V_{a_{i1}}}_{\equiv X_{i}}\cdot\left[\beta\right]_{\underbrace{t-\norm{X_{i}}}_{0}}=V_{a_{i1}}\cdot\beta\equiv X_{i}\beta$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $t<\norm{X_{i}}$
\end_inset

: 
\begin_inset Formula $\left\langle \alpha\right\rangle _{t}\left[\alpha\right]_{t}=V_{a_{i1}}\cdot\left[\alpha_{i1}\right]_{\underbrace{t-1}_{0}}\cdot\beta=V_{a_{i1}}\alpha_{i1}\beta\equiv X_{i}\beta$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Formula $1<t<\norm{X_{i}}\land\Gr{X_{i}}=a_{i1}\alpha_{i1}$
\end_inset

:
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\left\langle \alpha\right\rangle _{t}\left[\alpha\right]_{t}=V_{a_{i1}}\left\langle \alpha_{i1}\right\rangle _{t-1}\left[\alpha_{i1}\right]_{t-1}\beta\overset{\text{ind.}}{=}V_{a_{i1}}\alpha_{i1}\beta\equiv X_{i}\beta$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\norm{X_{i}}\leq t\leq\norm{X_{i}\beta}$
\end_inset

:
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\left\langle \alpha\right\rangle _{t}\left[\alpha\right]_{t}=X_{i}\left\langle \beta\right\rangle _{t-\norm{X_{i}}}=\left[\beta\right]_{t-\norm{X_{i}}}\overset{\text{ind.}}{=}X_{i}\beta$
\end_inset

.
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Standard
For compression grammars, if 
\begin_inset Formula $t\leq\norm X$
\end_inset

, then 
\begin_inset Formula $\left\langle X\right\rangle _{t}$
\end_inset

 will always succeed, i.e.
 not return 
\begin_inset Formula $\bot$
\end_inset

, because we do not allow sums in compression grammars.
\end_layout

\begin_layout Standard
However, if we look at general simple-deterministic grammars, we encounter
 cases where the decomposition will fail.
\end_layout

\begin_layout Example
We want to prove 
\begin_inset Formula $AB\equiv PCD$
\end_inset

 for the following grammar with 
\begin_inset Formula $m>0$
\end_inset

:
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
def
\backslash
svgwidth{200pt}
\end_layout

\begin_layout Plain Layout


\backslash
includesvg{Branching_Grammar}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Branching grammar.
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Formula 
\begin{align*}
A_{n+1} & \to aA_{n}+bA_{n}\\
C_{n+1} & \to aC_{n}+bC_{n}\\
A_{0} & \to a\\
C_{0} & \to aX\\
A & \to aPA_{m}\\
C & \to aC_{m}\\
P & \to a
\end{align*}

\end_inset

First, we note that
\begin_inset Formula 
\[
\norm A=\overbrace{\norm P}^{1}+\norm C-\norm X,
\]

\end_inset

so from 
\begin_inset Formula $\norm A-1=\norm C-\norm X$
\end_inset

 it follows that
\begin_inset Formula 
\[
\norm A-1<\norm C.
\]

\end_inset

Looking at the norms of the first variables 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $P$
\end_inset

 of our equivalence judgement, we see that the 
\begin_inset Formula $\norm A>\norm P$
\end_inset

, so we try to replace the first variable on the left side 
\begin_inset Formula $A$
\end_inset

 by the decomposition of the variables on the right side, i.e.
 
\begin_inset Formula $\left\langle PCD\right\rangle _{\norm A}$
\end_inset

.
 However, if we try to calculate 
\begin_inset Formula $\left\langle PCD\right\rangle _{\norm A}$
\end_inset

, we get:
\begin_inset Formula 
\begin{align*}
\left\langle PCD\right\rangle _{\norm A} & =P\left\langle CD\right\rangle _{\norm A-1}\\
 & =PA_{0}\left\langle C_{m}D\right\rangle _{\norm A-2}\\
 & =\bot\text{, because }1<\norm A-2<\norm{C_{m}}\text{, but }\Gr{C_{m}}\text{ is a sum.}
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
That is a realistic scenario in a proof, so what can we do to remedy this
 problem? We cannot easily fix the decomposition function to not return
 
\begin_inset Formula $\bot$
\end_inset

 in such cases, as it would have to return a potentially exponentially big
 sum of words otherwise, which is certainly not desirable.
 Our answer to this problem is the base: In cases where the decomposition
 is not applicable, we employ the base.
 E.g.
 in the example above, after determining that 
\begin_inset Formula $\left\langle PCD\right\rangle _{\norm A}$
\end_inset

 yields 
\begin_inset Formula $\bot$
\end_inset

, we postulate that 
\begin_inset Formula $A\equiv P\left[C\right]_{\norm P}$
\end_inset

, and in fact 
\begin_inset Formula $\left[C\right]_{\norm P}$
\end_inset

 will be equivalent to 
\begin_inset Formula $C_{m}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Explain figure!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
note problem when decomposition does not work, caused by non-compression
 
\begin_inset Formula $\rightarrow$
\end_inset

 exponential blowup in word branching
\end_layout

\end_inset


\end_layout

\begin_layout Section
Decomposition + base replacement
\end_layout

\begin_layout Section
Other ideas
\end_layout

\begin_layout Itemize
If we have for example 
\begin_inset Formula $A\equiv BCD$
\end_inset

 and 
\begin_inset Formula $A\equiv BCE$
\end_inset

, we might try to prove 
\begin_inset Formula $D\equiv E$
\end_inset

 directly.
 The problem is that we might have several choices to choose from ...
\end_layout

\begin_layout Itemize
If we have 
\begin_inset Formula $X_{1}X_{2}\dots X_{n}\equiv Y_{1}Y_{2}\dots Y_{m}$
\end_inset

, we might try to figure out 
\begin_inset Quotes eld
\end_inset

cut-points
\begin_inset Quotes erd
\end_inset

 by looking at the norms.
\end_layout

\begin_layout Itemize
Having already proven 
\begin_inset Formula $X\equiv Y$
\end_inset

 and faced with the task of proving 
\begin_inset Formula $Y\equiv X$
\end_inset

, we might just apply the symmetry rule.
\end_layout

\begin_layout Chapter
Proof construction algorithm
\end_layout

\begin_layout Section
Proof strategies
\end_layout

\begin_layout Standard
We use the following conventions for variable names:
\end_layout

\begin_layout Itemize
\begin_inset Formula $A,B,A_{n},B_{m}\in V$
\end_inset

 are variables,
\end_layout

\begin_layout Itemize
\begin_inset Formula $P,Q\in V^{+}$
\end_inset

 are non-empty variable words,
\end_layout

\begin_layout Itemize
\begin_inset Formula $P_{n},Q_{m}\in V^{*}$
\end_inset

 are (possibly empty) variable words, and
\end_layout

\begin_layout Itemize
\begin_inset Formula $a_{n},b_{m}\in T$
\end_inset

 are terminals.
\end_layout

\begin_layout Standard
Furthermore, we use the following abbreviations, where 
\begin_inset Formula $n_{A}$
\end_inset

 designates the number of factors/addends in the respective products/sums:
\begin_inset Formula 
\begin{align*}
\prod A_{x} & \equiv\prod_{x=1}^{n_{A}>1}A_{x},\\
\sum a_{x}A_{x} & \equiv\sum_{x=1}^{n_{A}>1}a_{x}A_{x}.
\end{align*}

\end_inset

The rules are named according to the type of judgement to prove:
\end_layout

\begin_layout Itemize
'p' stands for product of a single variable,
\end_layout

\begin_layout Itemize
'P' for product of multiple variables,
\end_layout

\begin_layout Itemize
's' for sum of one term, and
\end_layout

\begin_layout Itemize
'S' for sum of multiple terms.
\end_layout

\begin_layout Standard
For example, if we have to prove 
\begin_inset Formula $A\equiv aB_{1}+bB_{2}$
\end_inset

, we look for the rule pS, because 
\begin_inset Formula $A$
\end_inset

 is a single variable ('p') and 
\begin_inset Formula $aB_{1}+bB_{2}$
\end_inset

 is a sum of multiple terms ('S').
 In this case, however, there exists no rule pS, but only the rule psS,
 which indicates that it handles the cases ps and pS.
 Similarly the rule sSpP, which handles the cases sp, sP, Sp and SP.
\end_layout

\begin_layout Standard
For several judgement types, there exist multiple rules, which we apply
 depending on if their conditions are fulfilled.
 If there are several rules for one judgement type, we name them accordingly
 based on the performed action:
\end_layout

\begin_layout Itemize
B: base replacement
\end_layout

\begin_layout Itemize
D: decomposition replacement
\end_layout

\begin_layout Itemize
G: grammar replacement
\end_layout

\begin_layout Itemize
S: symmetry
\end_layout

\begin_layout Itemize
V: variable replacement
\end_layout

\begin_layout Itemize
\begin_inset Formula $\times$
\end_inset

: product
\end_layout

\begin_layout Standard
Now without further ado the rules:
\end_layout

\begin_layout Itemize

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
Refl: If we encounter a judgement where both sides are equal, we apply this
 rule.
\begin_inset Formula 
\[
\bussproof{\unaryinf{\axiomc{}}EE{\text{refl (Refl)}}}
\]

\end_inset


\end_layout

\begin_layout Itemize
Gr: If the right-hand side equals the grammar of the variable on the left-hand
 side, we apply this rule.
 
\begin_inset Formula 
\[
\bussproof{\unaryinf{\axiomc{}}A{\Gr A}{\text{gr (Gr)}}}
\]

\end_inset


\end_layout

\begin_layout Itemize
pp: This rule replaces the variable on the left-hand side by its grammar.
 
\begin_inset Formula 
\[
\bussproof{\binaryinf{\axiom A{\Gr A}}{\axiom{\Gr A}B}AB{\text{trans (pp)}}}
\]

\end_inset


\end_layout

\begin_layout Itemize
pP-B: If the right-hand side has not been subject to a previous base replacement
, we use the base to substitute the variable on the left-hand side.
\begin_inset Formula 
\begin{gather*}
\left[A\right]_{\norm{B_{1}}}\neq\prod_{y=2}^{n_{B}}B_{y}\implies\\
\bussproof{\binaryinf{\axiom A{B_{1}\left[A\right]_{\norm{B_{1}}}}}{\axiom{B_{1}\left[A\right]_{\norm{B_{1}}}}B}A{\prod B_{y}}{\text{trans (pP-B)}}}
\end{gather*}

\end_inset


\end_layout

\begin_layout Itemize
pP-G: If we cannot replace the right-hand side with the base (possibly because
 we have executed a base replacement before), we replace the variable on
 the left-hand side with its grammar.
\begin_inset Formula 
\begin{gather*}
\left[A\right]_{\norm{B_{1}}}=\prod_{y=2}^{n_{B}}B_{y}\implies\\
\bussproof{\binaryinf{\axiom A{\Gr A}}{\axiom{\Gr A}B}A{\prod B_{y}}{\text{trans (pP-B)}}}
\end{gather*}

\end_inset


\end_layout

\begin_layout Itemize
psS: If we encounter a sum of one or multiple terms on the right-hand side
 and a single variable on the left hand-side, we replace the single variable
 by its grammar:
\begin_inset Formula 
\[
\bussproof{\binaryinf{\axiom A{\Gr A}}{\axiom{\Gr A}B}A{\sum_{y=1}^{n_{B}\geq1}b_{y}Q_{y}}{\text{trans (psS)}}}
\]

\end_inset


\end_layout

\begin_layout Itemize
Pp: To avoid having rules like Pp-B and Pp-G, which would be symmetrical
 to pP-B and pP-G, we use the symmetry rule, after which the resulting judgement
 will be treated by a pP rule.
\begin_inset Formula 
\[
\bussproof{\unaryinf{\axiom B{\prod A_{x}}}{\prod A_{x}}B{\text{sym (Pp)}}}
\]

\end_inset


\end_layout

\begin_layout Itemize
PP-S: In all following PP rules, we assume that the first variable on the
 left-hand side has a greater or equal norm than the first variable on the
 right-hand side; we assure that condition with this rule.
 
\begin_inset Formula 
\begin{gather*}
\norm{A_{1}}<\norm{B_{1}}\implies\\
\bussproof{\unaryinf{\axiom{\prod B_{y}}{\prod A_{x}}}{\prod A_{x}}{\prod B_{y}}{\text{sym (PP-S)}}}
\end{gather*}

\end_inset


\end_layout

\begin_layout Itemize
PP-D: If the decomposition of the right-hand side with the norm of the first
 variable on the left-hand side is defined and we can replace the first
 variable on the left-hand side with the decomposition, we apply this rule.
\begin_inset Formula 
\begin{gather*}
\begin{aligned}\norm{A_{1}} & \geq\norm{B_{1}},\\
D & =\left\langle \prod B_{y}\right\rangle _{\norm{A_{1}}},\\
D & \neq\bot,\\
\lnot\exists c<n_{B}:\, D & =\prod_{y=1}^{c}B_{y}\implies
\end{aligned}
\\
\bussproof{\binaryinf{\axiom{\prod A_{x}}{D\prod_{x=2}^{n_{A}}A_{x}}}{\axiom{D\prod_{x=2}^{n_{A}}A_{x}}{\prod B_{y}}}{\prod A_{x}}{\prod B_{y}}{\text{trans (PP-D)}}}
\end{gather*}

\end_inset


\end_layout

\begin_layout Itemize
PP-
\begin_inset Formula $\times$
\end_inset

: If the decomposition of the right-hand side with the norm of the first
 variable on the left-hand side is defined, but is equal to a part of the
 right-hand side, we use the product rule.
\begin_inset Formula 
\begin{gather*}
\begin{aligned}\norm{A_{1}} & \geq\norm{B_{1}},\\
D & =\left\langle \prod B_{y}\right\rangle _{\norm{A_{1}}},\\
D & \neq\bot,\\
\exists c<n_{B}:\, D & =\prod_{y=1}^{c}B_{y}\implies
\end{aligned}
\\
\bussproof{\binaryinf{\axiom{A_{1}}{\prod_{y=1}^{c}B_{y}}}{\axiom{\prod_{x=2}^{n_{A}}A_{x}}{\prod_{y=c+1}^{n_{B}}B_{y}}}{\prod A_{x}}{\prod B_{y}}{\ensuremath{\times}\text{ (PP-\ensuremath{\times})}}}
\end{gather*}

\end_inset

Note that this rule also handles the case where 
\begin_inset Formula $A_{1}$
\end_inset

 is equal to 
\begin_inset Formula $B_{1}$
\end_inset

, e.g.
 
\begin_inset Formula $XY\equiv XZ$
\end_inset

.
\end_layout

\begin_layout Itemize
PP-B: If the decomposition yields 
\begin_inset Formula $\bot$
\end_inset

, we have to resort to the base replacement.
\begin_inset Formula 
\begin{gather*}
\begin{aligned}\norm{A_{1}} & \geq\norm{B_{1}},\\
D & =\left\langle \prod B_{y}\right\rangle _{\norm{A_{1}}},\\
D & =\bot,\\
R & =B_{1}\left[A_{1}\right]_{\norm{B_{1}}}\implies
\end{aligned}
\\
\bussproof{\binaryinf{\axiom{\prod A_{x}}{R\prod_{x=2}^{n_{A}}A_{x}}}{\axiom{R\prod_{x=2}^{n_{A}}A_{x}}{\prod B_{y}}}{\prod A_{x}}{\prod B_{y}}{\text{trans (PP-B)}}}
\end{gather*}

\end_inset


\end_layout

\begin_layout Itemize
Ps-
\begin_inset Formula $\times$
\end_inset

: If the norm of the first variable on the left-hand side is 1 and the right-han
d side is a sum of a single term, then we can split the product and the
 sum.
 
\begin_inset Formula 
\begin{gather*}
\norm{A_{1}}=1\implies\\
\bussproof{\binaryinf{\axiom{A_{1}}b}{\axiom{\prod_{x=2}^{n_{A}}A_{x}}Q}{\prod A_{x}}{bQ}{\ensuremath{\times}\text{ (Ps-\ensuremath{\times})}}}
\end{gather*}

\end_inset


\end_layout

\begin_layout Itemize
Ps-V: If the norm of the first variable on the left-hand side is greater
 than 1, then we replace the sum on the right-hand side with an equivalent
 product.
 To achieve that, we use the terminal morphism to associate 
\begin_inset Formula $b$
\end_inset

 with an equivalent variable having exactly one production rule, namely
 
\begin_inset Formula $V_{b}\to b$
\end_inset

.
 
\begin_inset Formula 
\begin{gather*}
\norm{A_{1}}>1\implies\\
\bussproof{\binaryinf{\axiom{\prod A_{x}}{V_{b}Q}}{\axiom{V_{b}Q}{bQ}}{\prod A_{x}}{bQ}{\text{trans (Ps-V)}}}
\end{gather*}

\end_inset


\end_layout

\begin_layout Itemize
PS-G: We replace the first variable on the left-hand side with its grammar,
 unless the result would be equal to the right-hand side.
\begin_inset Formula 
\begin{gather*}
\sum b_{y}B_{y}\neq\Gr{A_{1}}\cdot\prod_{x=2}^{n_{A}}A_{x}\implies\\
\bussproof{\binaryinf{\axiom{\prod A_{x}}{\Gr{A_{1}}\cdot\prod_{x=2}^{n_{A}}A_{x}}}{\axiom{\Gr{A_{1}}\cdot\prod_{x=2}^{n_{A}}A_{x}}{\sum b_{y}B_{y}}}{\prod A_{x}}{\sum b_{y}B_{y}}{\text{trans (PS-G)}}}
\end{gather*}

\end_inset


\end_layout

\begin_layout Itemize
PS-
\begin_inset Formula $\times$
\end_inset

: If the sum on the right-hand side is equal to the left-hand side, after
 its first variable has been replaced by its grammar, we can apply the 
\begin_inset Formula $\times$
\end_inset

 rule.
 This is normally a result of the PS-G rule.
 
\begin_inset Formula 
\begin{gather*}
\sum b_{y}B_{y}=\Gr{A_{1}}\cdot\prod_{x=2}^{n_{A}}A_{x}\implies\\
\bussproof{\binaryinf{\axiom{A_{1}}{\Gr{A_{1}}}}{\axiom{\prod_{x=2}^{n_{A}}A_{x}}{\prod_{x=2}^{n_{A}}A_{x}}}{\prod A_{x}}{\sum b_{y}B_{y}}{\ensuremath{\times}\text{ (PS-\ensuremath{\times})}}}
\end{gather*}

\end_inset


\end_layout

\begin_layout Itemize
sSpP: We resort to the pPsS rules to treat this case.
\begin_inset Formula 
\[
\unaryinf{\axiom Q{\sum a_{x}A_{x}}}{\sum_{x=1}^{n_{A}\geq1}a_{x}A_{x}}Q{\text{sym (sSpP)}}
\]

\end_inset


\end_layout

\begin_layout Itemize
ss: If the first terminals of the two sums are equivalent, we split the
 sums.
\begin_inset Formula 
\[
\binaryinf{\axiom aa}{\axiom PQ}{aP}{aQ}{\ensuremath{\times}\text{ (ss)}}
\]

\end_inset


\end_layout

\begin_layout Itemize
SS: If we find a terminal on the right-hand side which is equivalent to
 the first terminal on the left-hand side, we split the sums.
 
\begin_inset Formula 
\begin{gather*}
\exists!i:\, a_{1}=b_{i}\implies\\
\bussproof{\binaryinf{\axiom{a_{1}A_{1}}{b_{i}B_{i}}}{\axiom{\sum_{x=2}^{n_{A}}a_{x}A_{x}}{\sum_{y=1}^{i-1}b_{y}B_{y}+\sum_{y=i+1}^{n_{B}}b_{y}B_{y}}}{\sum a_{x}A_{x}}{\sum b_{y}B_{y}}{\ensuremath{+}\text{ (SS)}}}
\end{gather*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Extend by 
\begin_inset Formula $\bot$
\end_inset

 cases!
\end_layout

\end_inset

The validity of the proof strategies is proven in the appendix.
\end_layout

\begin_layout Section
Witness of non-equivalence
\end_layout

\begin_layout Standard
Here we explain how to construct witnesses of non-equivalence.
\end_layout

\begin_layout Chapter
Proof verification
\end_layout

\begin_layout Standard
Here we show how we may verify the correctness of a given proof.
\end_layout

\begin_layout Chapter
Experimental results
\end_layout

\begin_layout Standard
Here we say how great our algorithm performs.
\end_layout

\begin_layout Section
Benchmark grammars
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Formula 
\begin{align*}
F_{0} & \to a\\
F_{1} & \to a\\
F_{2} & \to aF_{0} & F_{2}^{'} & \to a\\
F_{n+3} & \to aF_{n+1}F_{n+2}^{'} & F_{3}^{'} & \to aF_{2}^{'}\\
 &  & F_{n+4}^{'} & \to aF_{n+2}^{'}F_{n+3}^{'}
\end{align*}

\end_inset


\begin_inset Formula 
\begin{align*}
G_{0} & \to a\\
G_{1} & \to a\\
G_{2} & \to aG_{0} & G_{2}^{'} & \to a\\
G_{n+3} & \to aG_{n+2}^{'}G_{n+1} & G_{3}^{'} & \to aG_{2}^{'}\\
 &  & G_{n+4}^{'} & \to aG_{n+3}^{'}G_{n+2}^{'}
\end{align*}

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Two encodings of the Fibonacci numbers 
\begin_inset Formula $f_{n}$
\end_inset

, where 
\begin_inset Formula $\norm{F_{n}}=\norm{G_{n}}=f_{n}$
\end_inset

 and 
\begin_inset Formula $\norm{F_{n}^{'}}=\norm{G_{n}^{'}}=f_{n}-1$
\end_inset

.
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Formula 
\begin{align*}
A & \to a & A & \to a\\
B & \to b & B & \to b\\
A_{B}^{0} & \rightarrow aB & B_{A}^{0} & \to bA\\
A_{B}^{n+1} & \to aB_{B}^{n+1} & B_{A}^{n+1} & \to bA_{A}^{n+1}\\
B_{B}^{n+1} & \to bA_{B}^{n}A_{B}^{n} & A_{A}^{n+1} & \to aB_{A}^{n}B_{A}^{n}\\
F^{n} & \to aBA_{B}^{n} & G^{n} & \to aB_{A}^{n}B
\end{align*}

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:AB-grammar-2NF"

\end_inset


\begin_inset Formula $F^{n}\equiv G^{n}$
\end_inset

.
 
\begin_inset Formula $\norm{F_{n}}=\norm{G_{n}}=2^{n+2}$
\end_inset

.
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Formula 
\begin{align*}
S_{0} & \to a\\
S_{1} & \to aS_{0} & S_{1}^{'} & \to a\\
S_{n+2} & \to aS_{n+1}S_{n+1}^{'} & S_{n+2}^{'} & \to aS_{n+1}^{'}S_{n+1}^{'}
\end{align*}

\end_inset


\begin_inset Formula 
\begin{align*}
T_{0} & \to a\\
T_{1} & \to aT_{0} & T_{1}^{'} & \to a\\
T_{n+2} & \to aT_{n+1}^{'}T_{n+1} & T_{n+2}^{'} & \to aT_{n+1}^{'}T_{n+1}^{'}
\end{align*}

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Formula $\norm{S_{n}}=\norm{T_{n}}=2^{n}$
\end_inset

.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Conclusion
\end_layout

\begin_layout Standard
Playing Nostradamus here ...
\end_layout

\begin_layout Chapter*
Appendix
\end_layout

\begin_layout Standard
Here we prove that our proof rules are sound.
\end_layout

\begin_layout Itemize
pp:
\begin_inset Formula 
\[
\bussproof{\binaryinf{\unaryinf{\axiomc{}}A{\Gr A}{\text{gr (Gr)}}}{\unaryinf{\binaryinf{\unaryinf{\axiomc{}}B{\Gr B}{\text{gr (Gr)}}}{\axiom{\Gr B}{\Gr A}}B{\Gr A}{\text{trans (psS)}}}{\Gr A}B{\text{sym (sSpP)}}}AB{\text{trans (pp)}}}
\]

\end_inset

When we have to prove 
\begin_inset Formula $\Gr B\equiv\Gr A$
\end_inset

, we either have to apply ss or SS.
\end_layout

\begin_layout Itemize
pP-G:
\begin_inset Formula 
\[
\bussproof{\binaryinf{\unaryinf{\axiomc{}}A{\Gr A}{\text{gr (Gr)}}}{\unaryinf{\axiom{\prod B_{y}}{\Gr A}}{\Gr A}{\prod B_{y}}{\text{sym (sSpP)}}}A{\prod B_{y}}{\text{trans (pP-G)}}}
\]

\end_inset

To prove 
\begin_inset Formula $\prod B_{y}\equiv\Gr A$
\end_inset

, we have to distinguish the cases where 
\begin_inset Formula $\Gr A$
\end_inset

 is a sum of a single or of multiple elements: If 
\begin_inset Formula $\Gr A$
\end_inset

 is a sum of a single element, we have the choice between applying Ps-
\begin_inset Formula $\times$
\end_inset

 and Ps-V; if it is a sum of multiple elements, we may apply PS-
\begin_inset Formula $\times$
\end_inset

 or PS-G.
 The cases for Ps-
\begin_inset Formula $\times$
\end_inset

 and PS-
\begin_inset Formula $\times$
\end_inset

 are trivial, so we refer to Ps-V and PS-G only.
\end_layout

\begin_layout Itemize
pP-B:
\begin_inset Formula 
\[
\bussproof{\binaryinf{\binaryinf{\axiomc{\dots}}{\axiomc{\dots}}A{B_{1}\left[A\right]_{\norm{B_{1}}}}{\text{trans (pP-G)}}}{\binaryinf{\axiomc{\dots}}{\axiomc{\dots}}{B_{1}\left[A\right]_{\norm{B_{1}}}}{\prod B_{y}}{\ensuremath{\times}\text{ (PP-\ensuremath{\times})}}}A{\prod B_{y}}{\text{trans (pP-B)}}}
\]

\end_inset


\end_layout

\begin_layout Itemize
psS:
\begin_inset Formula 
\[
\binaryinf{\unaryinf{\axiomc{}}A{\Gr A}{\text{gr (Gr)}}}{\binaryinf{\axiomc{\dots}}{\axiomc{\dots}}{\Gr A}{\sum b_{y}B_{y}}{\ensuremath{+}\mbox{\text{ (SS)}}}}A{\sum b_{y}B_{y}}{\text{trans (psS)}}
\]

\end_inset


\end_layout

\begin_layout Itemize
PP-D:
\begin_inset Formula 
\[
\bussproof{\binaryinf{\binaryinf{\axiomc{\dots}}{\axiomc{\dots}}{\prod A_{x}}{D\prod_{x=2}^{n_{A}}A_{x}}{\ensuremath{\times}\text{ (PP-\ensuremath{\times})}}}{\binaryinf{\axiomc{\dots}}{\axiomc{\dots}}{D\prod_{x=2}^{n_{A}}A_{x}}{\prod B_{y}}{\ensuremath{\times}\text{ (PP-\ensuremath{\times})}}}{\prod A_{x}}{\prod B_{y}}{\text{trans (PP-D)}}}
\]

\end_inset

Because of 
\begin_inset Formula $\norm D=\norm{A_{1}}$
\end_inset

 and 
\begin_inset Formula $D=B_{1}\dots$
\end_inset

, the applications of PP-
\begin_inset Formula $\times$
\end_inset

 are justified.
\end_layout

\begin_layout Itemize
PP-B: 
\begin_inset Formula 
\[
\bussproof{\binaryinf{\binaryinf{\axiomc{\dots}}{\axiomc{\dots}}{\prod A_{x}}{B_{1}\left[A_{1}\right]_{\norm{B_{1}}}\prod_{x=2}^{n_{A}}A_{x}}{\ensuremath{\times}\text{ (PP-\ensuremath{\times})}}}{\binaryinf{\axiomc{\dots}}{\axiomc{\dots}}{B_{1}\left[A_{1}\right]_{\norm{B_{1}}}\prod_{x=2}^{n_{A}}A_{x}}{\prod B_{y}}{\ensuremath{\times}\text{ (PP-\ensuremath{\times})}}}{\prod A_{x}}{\prod B_{y}}{\text{trans (PP-B)}}}
\]

\end_inset

Because of 
\begin_inset Formula $\norm{B_{1}\left[A_{1}\right]_{\norm{B_{1}}}}=\norm{A_{1}}$
\end_inset

, the left application of PP-
\begin_inset Formula $\times$
\end_inset

 is justified.
\end_layout

\begin_layout Itemize
Ps-V:
\begin_inset Formula 
\[
\bussproof{\binaryinf{\axiom{\prod A_{x}}{V_{b}Q}}{\binaryinf{\axiomc{\dots}}{\axiomc{\dots}}{V_{b}Q}{bQ}{\ensuremath{\times}\text{ (Ps-\ensuremath{\times})}}}{\prod A_{x}}{bQ}{\text{trans (Ps-V)}}}
\]

\end_inset

To prove 
\begin_inset Formula $\prod A_{x}\equiv V_{b}Q$
\end_inset

, we have to apply PP-D or PP-B.
\end_layout

\begin_layout Itemize
PS-G:
\begin_inset Formula 
\[
\bussproof{\binaryinf{\binaryinf{\axiomc{\dots}}{\axiomc{\dots}}{\prod A_{x}}{\Gr{A_{1}}\cdot\prod_{x=2}^{n_{A}}A_{x}}{\ensuremath{\times}\text{ (PS-\ensuremath{\times})}}}{\binaryinf{\axiomc{\dots}}{\axiomc{\dots}}{\Gr{A_{1}}\cdot\prod_{x=2}^{n_{A}}A_{x}}{\sum b_{y}B_{y}}{\ensuremath{+}\mbox{\text{ (SS)}}}}{\prod A_{x}}{\sum b_{y}B_{y}}{\text{trans (PS-G)}}}
\]

\end_inset


\end_layout

\begin_layout Itemize
SS:
\begin_inset Formula 
\[
\bussproof{\binaryinf{\binaryinf{\axiomc{\dots}}{\axiomc{\dots}}{a_{1}A_{1}}{b_{i}B_{i}}{\ensuremath{\times}\text{ (ss)}}}{\binaryinf{\binaryinf{\axiomc{\dots}}{\axiomc{\dots}}{a_{2}A_{2}}{b_{j}B_{j}}{\ensuremath{\times}\text{ (ss)}}}{\binaryinfc{\axiomc{\dots}}{\unaryinfc{\binaryinf{\axiomc{\dots}}{\axiomc{\dots}}{a_{n_{A}}A_{n_{A}}}{b_{l}B_{l}}{\ensuremath{\times}\text{ (ss)}}}{\iddots}{\ensuremath{+}\mbox{\text{ (SS)}}}}{\dots}{\ensuremath{+}\mbox{\text{ (SS)}}}}{\sum_{x=2}^{n_{A}}A_{x}}{\sum_{y=1}^{i-1}b_{y}B_{y}+\sum_{y=i+1}^{n_{B}}b_{y}B_{y}}{\ensuremath{+}\mbox{\text{ (SS)}}}}{\sum a_{x}A_{x}}{\sum b_{y}B_{y}}{\ensuremath{+}\mbox{\text{ (SS)}}}}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout

% the >=stealth parameter draws arrows for all edges, not only straight
 ones
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[->, >=stealth, node distance = 1cm, auto]
\end_layout

\begin_layout Plain Layout

  
\backslash
node (Pp)                                             {Pp};
\end_layout

\begin_layout Plain Layout

  
\backslash
node (pP-B)  [above right = 0.5cm of Pp]              {pP-B};
\end_layout

\begin_layout Plain Layout

  
\backslash
node (pP-G)  [below right = 0.5cm of Pp]              {pP-G};
\end_layout

\begin_layout Plain Layout

  
\backslash
node (sSP)   [right = of pP-G]                        {sSP};
\end_layout

\begin_layout Plain Layout

  
\backslash
node (Ps-x)  [above right = -0.2cm and 0.5cm of sSP]  {Ps-$
\backslash
times$};
\end_layout

\begin_layout Plain Layout

  
\backslash
node (PS-x)  [below right = -0.2cm and 0.5cm of sSP]  {PS-$
\backslash
times$};
\end_layout

\begin_layout Plain Layout

  
\backslash
node (Ps-V)  [above right =  0.75cm and 0.5cm of sSP]  {Ps-V};
\end_layout

\begin_layout Plain Layout

  
\backslash
node (PS-G)  [below right =  0.75cm and 0.5cm of sSP]  {PS-G};
\end_layout

\begin_layout Plain Layout

  
\backslash
node (PP-D)  [above right =  0.2cm and 0.5cm of Ps-V] {PP-D};
\end_layout

\begin_layout Plain Layout

  
\backslash
node (PP-B)  [below right =  0.2cm and 0.5cm of Ps-V] {PP-B};
\end_layout

\begin_layout Plain Layout

  
\backslash
node (PP-x)  [right = 0.5cm of Ps-V]                  {PP-$
\backslash
times$};
\end_layout

\begin_layout Plain Layout

  
\backslash
node (PP-S)  [right = of PP-x]                        {PP-S};
\end_layout

\begin_layout Plain Layout

  
\backslash
node (Gr)    [below = of pP-G]      {Gr};
\end_layout

\begin_layout Plain Layout

  
\backslash
node (sSp)   [below = of Gr]        {sSp};
\end_layout

\begin_layout Plain Layout

  
\backslash
node (pp)    [left = of sSp]        {pp};
\end_layout

\begin_layout Plain Layout

  
\backslash
node (psS)   [right = of sSp]       {psS};
\end_layout

\begin_layout Plain Layout

  
\backslash
node (SS)    [right = of psS]       {SS};
\end_layout

\begin_layout Plain Layout

  
\backslash
node (ss)    [right = of SS]        {ss};
\end_layout

\begin_layout Plain Layout

  
\backslash
path (Pp)    edge (pP-B)
\end_layout

\begin_layout Plain Layout

                edge (pP-G)
\end_layout

\begin_layout Plain Layout

        (pP-B)  edge (pP-G)
\end_layout

\begin_layout Plain Layout

                edge (PP-x)
\end_layout

\begin_layout Plain Layout

        (pP-G)  edge (Gr)
\end_layout

\begin_layout Plain Layout

                edge (sSP)
\end_layout

\begin_layout Plain Layout

        (sSP)   edge (Ps-V)
\end_layout

\begin_layout Plain Layout

                edge (Ps-x)
\end_layout

\begin_layout Plain Layout

                edge (PS-x)
\end_layout

\begin_layout Plain Layout

                edge (PS-G)
\end_layout

\begin_layout Plain Layout

        (Ps-V)  edge (Ps-x)
\end_layout

\begin_layout Plain Layout

                edge (PP-D)
\end_layout

\begin_layout Plain Layout

                edge (PP-B)
\end_layout

\begin_layout Plain Layout

        (PS-G)  edge (PS-x)
\end_layout

\begin_layout Plain Layout

        (PP-D)  edge (PP-x)
\end_layout

\begin_layout Plain Layout

        (PP-B)  edge (PP-x)
\end_layout

\begin_layout Plain Layout

        (PP-S)  edge (PP-D)
\end_layout

\begin_layout Plain Layout

                edge (PP-x)
\end_layout

\begin_layout Plain Layout

                edge (PP-B)
\end_layout

\begin_layout Plain Layout

        (pp)    edge (Gr)
\end_layout

\begin_layout Plain Layout

                edge (sSp)
\end_layout

\begin_layout Plain Layout

        (sSp)   edge (psS)
\end_layout

\begin_layout Plain Layout

        (psS)   edge (Gr)
\end_layout

\begin_layout Plain Layout

                edge (SS)
\end_layout

\begin_layout Plain Layout

        (SS)    edge[loop below] (SS)
\end_layout

\begin_layout Plain Layout

                edge (ss);
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Dependency graph for proof rules.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintAll"
bibfiles "Literature"
options "plain"

\end_inset


\end_layout

\end_body
\end_document
