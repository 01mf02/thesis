#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass beamer
\begin_preamble
\usepackage{pgf}
\usepackage{tikz}
\usetikzlibrary{arrows,automata}

\usepackage{bussproofs}

\usepackage{gnuplot-lua-tikz}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title (Plain Frame)
Equivalence proofs of simple deterministic grammars
\end_layout

\begin_layout Author
Michael Färber
\end_layout

\begin_layout Institute
Université Bordeaux 1, LaBRI
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "IncludesP.lyx"

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout BeginFrame
A Matter of Trust
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Premise}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<1->
\end_layout

\end_inset

Many algorithms give only yes/no answers.
 We trust them usually because they are proven to be correct.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Problems}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<2->
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
An algorithm might be correct, but its implementation might be erroneous.
\end_layout

\begin_layout Itemize
The machine executing an algorithm might misbehave.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Solution: Proofs}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<3->
\end_layout

\end_inset


\end_layout

\begin_layout Block
An algorithm can certify its response with a proof, which the user can check
 afterwards.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Our problem
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Task}
\end_layout

\end_inset

Are two given simple deterministic grammars (sdgs) equivalent?
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Existing solution}
\end_layout

\end_inset

The equivalence of sdgs is decidable in P with the algorithm from Hirshfeld,
 Faron & Moller, but the algorithm does not produce an equivalence proof.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Question}
\end_layout

\end_inset

Can we find an algorithm to construct equivalence proofs of sdgs in time
 P?
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Section
Grammars and proofs
\end_layout

\begin_layout BeginFrame
Simple deterministic grammars
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Grammar}
\end_layout

\end_inset

A simple deterministic grammar is a context-free grammar in Greibach normal
 form such that for each terminal 
\begin_inset Formula $a$
\end_inset

, there exists at most one production rule 
\begin_inset Formula $X\to a\alpha$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Equivalence}
\end_layout

\end_inset

Two variables are equivalent iff they generate the same language.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Example grammar
\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status open

\begin_layout Plain Layout

{Example:}
\end_layout

\end_inset


\begin_inset Formula 
\begin{align*}
X & \to a+bC_{1}\\
Y & \to a+bC_{2}\\
C_{1} & \to c\\
C_{2} & \to c
\end{align*}

\end_inset


\begin_inset Formula 
\[
\bussproof{\transinf{C_{1}}{C_{2}}{\gr{C_{1}}c}{\syminf c{C_{2}}{\gr{C_{2}}c}}}
\]

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Full example proof
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
onslide<3->{
\end_layout

\end_inset


\begin_inset Formula 
\[
\bussproof{\transinf{C_{2}}{C_{1}}{\gr{C_{2}}c}{\syminf c{C_{1}}{\gr{C_{1}}c}}}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
onslide<2->{
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\bussproof{\plusinf{a+bC_{2}}{a+bC_{1}}{\refl aa}{\timesinf{bC_{2}}{bC_{1}}{\refl bb}{\axiom{C_{2}}{C_{1}}}}}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\bussproof{\transinf XY{\gr X{a+bC_{1}}}{\syminf{a+bC_{1}}Y{\transinf Y{a+bC_{1}}{\gr Y{a+bC_{2}}}{\axiom{a+bC_{2}}{a+bC_{1}}}}}}
\]

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Recursive grammar
\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status open

\begin_layout Plain Layout

{Example:}
\end_layout

\end_inset


\begin_inset Formula 
\begin{align*}
X & \to a+bX\\
Y & \to a+bY.
\end{align*}

\end_inset

We see that 
\begin_inset Formula $\lang X=\lang Y=b^{*}a$
\end_inset

.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Implicit induction proof
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
onslide<2->{
\end_layout

\end_inset


\begin_inset Formula 
\[
\bussproof{\plusinf{a+bY}{a+bX}{\refl aa}{\timesinf{bY}{bX}{\refl bb}{\syminf YX{\sj XY}}}}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\bussproof{\transinf XY{\gr X{a+bX}}{\syminf{a+bX}Y{\transinf Y{a+bX}{\gr Y{a+bY}}{\axiom{a+bY}{a+bX}}}}}
\]

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
What is not a proof?
\end_layout

\begin_layout Example
\begin_inset Formula 
\[
\bussproof{\syminf XY{\syminf YX{\sj XY}}}
\]

\end_inset


\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Why is that an invalid proof?}
\end_layout

\end_inset

On paths between two equivalent rules, there must be at least one product
 (
\begin_inset Formula $\times$
\end_inset

) rule.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Proof system
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Schemes of non-strict rules:
\end_layout

\begin_layout Itemize
\begin_inset Formula $\bussproof{\syminf xy{\axiom yx}}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\bussproof{\transinf xz{\axiom xy}{\axiom yz}}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\bussproof{\plusinf{x+y}{x'+y'}{\axiom x{x'}}{\axiom y{y'}}}$
\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Schemes of strict rules:
\end_layout

\begin_layout Itemize
\begin_inset Formula $\bussproof{\refl xx}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\bussproof{\timesinf{x\cdot y}{x'\cdot y'}{\axiom x{x'}}{\axiom y{y'}}}$
\end_inset


\end_layout

\begin_layout Plain Layout
Strict rules:
\end_layout

\begin_layout Itemize
\begin_inset Formula $\bussproof{\gr X{\Gr X}}$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Proof-rules"

\end_inset

Proof rules.
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
explain strict rules?
\end_layout

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Section
Our work
\end_layout

\begin_layout BeginFrame
Our proof construction algorithm
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Strategy}
\end_layout

\end_inset

Depth-first search with information which rules have already been constructed,
 to avoid proving the same judgement multiple times.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Tactics}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
grammar replacement: dummy tactic (not implemented), replaces variables
 with their grammars
\end_layout

\begin_layout Itemize
base replacement: replaces variables with their Caucal base entry
\end_layout

\begin_layout Itemize
decomposition: own development; not always applicable, therefore falling
 back to base replacement sometimes
\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Our implementation
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Groof}
\end_layout

\end_inset


\end_layout

\begin_layout Block
OCaml program (
\begin_inset CommandInset include
LatexCommand input
filename "programsize.txt"

\end_inset

LOC) to produce 
\emph on
gr
\emph default
ammar equivalence pr
\emph on
oof
\emph default
s.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Tasks}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
produce grammars
\end_layout

\begin_layout Itemize
verify grammars
\end_layout

\begin_layout Itemize
produce equivalence proofs, using different tactics
\end_layout

\begin_layout Itemize
verify proofs
\end_layout

\begin_layout Itemize
measure proof sizes
\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Our grammars
\end_layout

\begin_layout Standard
We created several grammars containing equivalent variables to test our
 algorithm.
 Most of these grammars are scalable.
\end_layout

\begin_layout Example
\begin_inset Formula 
\begin{align*}
A_{0} & \to a & A_{0}^{'} & \to a\\
A_{n+1} & \to aA_{n}A_{n} & A_{n+1}^{'} & \to aA_{n}^{'}A_{n}^{'}
\end{align*}

\end_inset


\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Language overview}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $a^{2^{n}}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $a^{f_{n}}$
\end_inset

, where 
\begin_inset Formula $f_{n}$
\end_inset

 is the 
\begin_inset Formula $n$
\end_inset

-th Fibonacci number
\end_layout

\begin_layout Itemize
\begin_inset Formula $\left(ab\right)^{2^{n+1}}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\left(a+b\right)^{2^{n+2}}$
\end_inset


\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Selected grammar example
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\begin{aligned}A & \to a & A & \to a\\
B & \to b & B & \to b\\
A_{B,0} & \to aB & B_{A,0} & \to bA\\
A_{B,n+1} & \to aBA_{B,n}A_{B,n} & B_{A,n+1} & \to bAB_{A,n}B_{A,n}\\
F_{n} & \to aBA_{B,n} & G_{n} & \to aB_{A,n}B
\end{aligned}
\]

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Results
\end_layout

\begin_layout Itemize
grammar replacement: exponential
\end_layout

\begin_layout Itemize
base replacement: exponential
\end_layout

\begin_layout Itemize
decomposition: exponential (when falling back to base replacement), but
 so far polynomial for compression grammars
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Complexity proof}
\end_layout

\end_inset

We were able to prove that our proof strategy with the decomposition tactic
 has complexity 2-EXPTIME, but in experimental results, it took only maximally
 EXPTIME.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Results for Fibonacci grammar
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "proof_sizes1.tex"

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout BeginFrame
Outlook
\end_layout

\begin_layout Itemize
Find new strategy to prevent exponential-size proofs
\end_layout

\begin_layout Itemize
Adapt given proof system
\end_layout

\begin_layout Itemize
Find new proof system: A system more closely related to the existing polynomial
 algorithm would allow polynomial-size proofs, but proof system would be
 more complex and proofs in it might not be as simple to verify.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame

\end_layout

\begin_layout Standard
\align center
Thank you for your attention! Questions?
\end_layout

\begin_layout EndFrame

\end_layout

\end_body
\end_document
