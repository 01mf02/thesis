#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\begin_modules
theorems-ams-bytype
\end_modules
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Context-free grammars
\end_layout

\begin_layout Definition
\begin_inset Argument
status open

\begin_layout Plain Layout
Context-free grammar
\end_layout

\end_inset

A context-free grammar (CFG) is a triple 
\begin_inset Formula $(V,\Sigma,P)$
\end_inset

 such that
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $V$
\end_inset

 is a finite set of nonterminals, which we call 
\emph on
variables
\emph default
,
\end_layout

\begin_layout Itemize
\begin_inset Formula $\Sigma$
\end_inset

 is a finite set of terminals,
\end_layout

\begin_layout Itemize
\begin_inset Formula $P\subset V\times(V\cup\Sigma)^{*}$
\end_inset

 is a finite set of production rules.
 For each variable 
\begin_inset Formula $X\in V$
\end_inset

, there exists at least one production rule 
\begin_inset Formula $(X,\alpha)\in P$
\end_inset

, i.e.
\begin_inset Formula 
\[
\forall X\in V,\,\exists\alpha\in\left(V\cup\Sigma\right)^{*}:\,(X,\alpha)\in P.
\]

\end_inset

To express all production rules for a variable 
\begin_inset Formula $X\in V$
\end_inset

, we write
\begin_inset Formula 
\[
X\to\sum_{\left(X,\alpha\right)\in P}\alpha.
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
Now we define the different types of words.
\end_layout

\begin_layout Definition
\begin_inset Argument
status open

\begin_layout Plain Layout
Words
\end_layout

\end_inset

A 
\emph on
variable word
\emph default
 is a finite sequence of variables 
\begin_inset Formula $w_{V}\in V^{*}$
\end_inset

, and a 
\emph on
terminal word
\emph default
 is a finite sequence of terminals 
\begin_inset Formula $w_{T}\in\Sigma^{*}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $\lang X$
\end_inset

 denotes the language generated by a variable 
\begin_inset Formula $X$
\end_inset

 .
\end_layout

\begin_layout Standard
An important property of a variable is the length of its shortest producible
 word.
\end_layout

\begin_layout Definition
\begin_inset Argument
status open

\begin_layout Plain Layout
Variable norm
\end_layout

\end_inset

The 
\emph on
variable norm
\emph default
 is a function 
\begin_inset Formula $\norm{\cdot}:V^{*}\to\left(\mathbb{N}\cup\left\{ \infty\right\} \right)$
\end_inset

 such that given a variable word 
\begin_inset Formula $\alpha\in V^{*}$
\end_inset

, 
\begin_inset Formula $\norm{\alpha}$
\end_inset

 equals the length of the shortest terminal word 
\begin_inset Formula $w\in\Sigma^{*}$
\end_inset

 which can be produced from 
\begin_inset Formula $\alpha$
\end_inset

, i.e.
\begin_inset Formula 
\[
\norm{\alpha}:=\inf_{w\in\lang{\alpha}}\left|w\right|.
\]

\end_inset

When 
\begin_inset Formula $\alpha$
\end_inset

 contains a variable which produces no single finite word, 
\begin_inset Formula $\alpha$
\end_inset

 itself will also produce no single finite word, in which case 
\begin_inset Formula $\norm{\alpha}=\infty$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Definition
\begin_inset Argument
status open

\begin_layout Plain Layout
Normed grammar
\end_layout

\end_inset

A grammar is 
\emph on
normed
\emph default
 iff all its variables produce at least one finite word, i.e.
\begin_inset Formula 
\[
\forall X\in V:\,\norm X\neq\infty.
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Definition
\begin_inset Argument
status open

\begin_layout Plain Layout
Greibach normal form
\end_layout

\end_inset

A grammar 
\begin_inset Formula $G$
\end_inset

 is in 
\emph on
Greibach normal form
\emph default
 (GNF) iff each production rule has the form 
\begin_inset Formula $X\to a\alpha$
\end_inset

, where 
\begin_inset Formula $a\in\Sigma$
\end_inset

 and 
\begin_inset Formula $\alpha\in V^{*}$
\end_inset

.
 If the length of the longest 
\begin_inset Formula $\alpha$
\end_inset

 is 
\begin_inset Formula $k$
\end_inset

, then 
\begin_inset Formula $G$
\end_inset

 is in 
\begin_inset Formula $k$
\end_inset

-GNF.
\end_layout

\begin_layout Example
\begin_inset CommandInset label
LatexCommand label
name "ex:Example-grammar"

\end_inset

Consider the following grammar:
\begin_inset Formula 
\begin{align*}
X & \to aX+bZ\\
Y & \to bZZ+aX\\
Z & \to c
\end{align*}

\end_inset

This is a CFG in 2-GNF, as there are maximally two variables on the right
 side of a production rule, namely in 
\begin_inset Formula $Y\to bZZ$
\end_inset

.
\end_layout

\begin_layout Standard
We may visualise a grammar with a 
\emph on
construction graph
\emph default
.
\end_layout

\begin_layout Definition
\begin_inset Argument
status open

\begin_layout Plain Layout
Construction graph
\end_layout

\end_inset

A construction graph for a grammar 
\begin_inset Formula $G=(V,\Sigma,P)$
\end_inset

 in GNF is a graph with the following conditions:
\end_layout

\begin_deeper
\begin_layout Itemize
Each vertex of the graph represents a variable word 
\begin_inset Formula $w\in V^{*}$
\end_inset

.
\end_layout

\begin_layout Itemize
For each vertex 
\begin_inset Formula $w=X\beta$
\end_inset

 (with 
\begin_inset Formula $X\in V$
\end_inset

 some variable and 
\begin_inset Formula $\beta\in V^{*}$
\end_inset

 some variable word) in the graph and for each production rule 
\begin_inset Formula $(X,a\alpha)\in P$
\end_inset

 (with 
\begin_inset Formula $\alpha\in V^{*}$
\end_inset

 some variable word), there exists an edge with label 
\begin_inset Formula $a\in\Sigma$
\end_inset

 from 
\begin_inset Formula $w$
\end_inset

 to 
\begin_inset Formula $w'=\alpha\beta$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Standard
We have as simple lemma:
\end_layout

\begin_layout Lemma
Given a construction graph for a grammar 
\begin_inset Formula $G$
\end_inset

, it holds that:
\end_layout

\begin_deeper
\begin_layout Itemize
Each path from a variable word 
\begin_inset Formula $w$
\end_inset

 to 
\begin_inset Formula $\varepsilon$
\end_inset

 represents a terminal word produced by 
\begin_inset Formula $w$
\end_inset

.
\end_layout

\begin_layout Itemize
The length of the shortest path from a variable word 
\begin_inset Formula $w$
\end_inset

 to 
\begin_inset Formula $\varepsilon$
\end_inset

 in the graph is equivalent to 
\begin_inset Formula $\norm w$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Example
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[->, node distance = 2cm, auto]
\end_layout

\begin_layout Plain Layout

  
\backslash
node (X)                 {$X$};
\end_layout

\begin_layout Plain Layout

  
\backslash
node (Y)  [right of = X] {$Y$};
\end_layout

\begin_layout Plain Layout

  
\backslash
node (Z)  [below of = X] {$Z$};
\end_layout

\begin_layout Plain Layout

  
\backslash
node (ZZ) [right of = Z] {$ZZ$};
\end_layout

\begin_layout Plain Layout

  
\backslash
node (e)  [below of = Z] {$
\backslash
varepsilon$};
\end_layout

\begin_layout Plain Layout

  
\backslash
path (X)  edge[loop above] node {$a$} (X)
\end_layout

\begin_layout Plain Layout

             edge             node {$b$} (Z)
\end_layout

\begin_layout Plain Layout

        (Y)  edge             node {$a$} (X)
\end_layout

\begin_layout Plain Layout

             edge             node {$b$} (ZZ)
\end_layout

\begin_layout Plain Layout

        (Z)  edge             node {$c$} (e)
\end_layout

\begin_layout Plain Layout

        (ZZ) edge             node {$c$} (Z);
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Production-graph"

\end_inset

Production graph for example grammar.
\end_layout

\end_inset


\end_layout

\end_inset

Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Production-graph"

\end_inset

 shows a production graph for the grammar in example
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "ex:Example-grammar"

\end_inset

.
 With this particular production graph, we can determine the norms and producibl
e terminal words of the variable words 
\begin_inset Formula $X$
\end_inset

, 
\begin_inset Formula $Y$
\end_inset

, 
\begin_inset Formula $Z$
\end_inset

 and 
\begin_inset Formula $ZZ$
\end_inset

, because these are the variable words present in the graph.
 To determine the norms of these variable words, we just need to determine
 the length of the shortest path from them to the empty word 
\begin_inset Formula $\varepsilon$
\end_inset

, which results in 
\begin_inset Formula $\norm X=2$
\end_inset

, 
\begin_inset Formula $\norm Y=3$
\end_inset

 and 
\begin_inset Formula $\norm Z=1$
\end_inset

.
 Also, among others, 
\begin_inset Formula $bcc\in\lang Y$
\end_inset

 and 
\begin_inset Formula $aa^{*}bc\subset\lang Y$
\end_inset

 hold, which we conclude by collecting the labels along the paths from the
 variable words to 
\begin_inset Formula $\varepsilon$
\end_inset

.
\end_layout

\begin_layout Section
Simple deterministic grammars
\end_layout

\begin_layout Definition
\begin_inset Argument
status open

\begin_layout Plain Layout
Simple deterministic grammar
\end_layout

\end_inset

A simple deterministic grammar (or simple context-free grammar), short SDG,
 is a CFG in GNF with the condition that for each variable 
\begin_inset Formula $X\in V$
\end_inset

 and each 
\begin_inset Formula $a\in\Sigma$
\end_inset

, there exists at most one rule 
\begin_inset Formula $X\to a\alpha$
\end_inset

 in 
\begin_inset Formula $P$
\end_inset

.
\end_layout

\begin_layout Standard
Looking at example
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "ex:Example-grammar"

\end_inset

, we can see that its grammar is simple deterministic.
\end_layout

\begin_layout Standard
Simple deterministic grammars are a proper subclass of context-free grammars;
 in fact, the relation between several language classes is 
\begin_inset Formula 
\[
\lang{\mathrm{SDG}}\subsetneq\lang{\mathrm{DCFG}}\subsetneq\lang{\mathrm{CFG}},
\]

\end_inset

where 
\begin_inset Formula $\mathrm{DCFG}$
\end_inset

 denotes deterministic context-free grammars (those grammars accepted by
 a deterministic pushdown automaton) and 
\begin_inset Formula $\mathrm{CFG}$
\end_inset

 denotes context-free grammars
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "harrison1978"

\end_inset

.
\end_layout

\begin_layout Standard
While each variable of a SDG can potentially produce a set of several different
 terminal words 
\begin_inset Formula $W_{T}\subset T^{+}$
\end_inset

, we also looked at the special case of SDGs where each variable 
\begin_inset Formula $X\in V$
\end_inset

 produces only one single terminal word 
\begin_inset Formula $w\in T^{+}$
\end_inset

:
\end_layout

\begin_layout Definition
A compression grammar is a simple deterministic grammar, with the condition
 that for each variable 
\begin_inset Formula $X\in V$
\end_inset

, there exists at most one word 
\begin_inset Formula $w\in\left(T\cup V\right)^{*}$
\end_inset

 such that 
\begin_inset Formula $X\to w$
\end_inset

 is in 
\begin_inset Formula $P$
\end_inset

.
\end_layout

\begin_layout Standard
Note that while we can only produce one single terminal word with each variable
 of a compression grammar, the norm of each variable is still potentially
 exponential in the number of variables.
\end_layout

\begin_layout Example
\begin_inset CommandInset label
LatexCommand label
name "ex:2^n-grammar"

\end_inset

Consider the following grammar:
\begin_inset Formula 
\begin{align*}
F_{0} & \to a\\
F_{n+1} & \to aF_{n}F_{n}
\end{align*}

\end_inset

All variables of this grammar produce exactly one word.
 Furthermore, the greatest norm of all variables is exponential in the number
 of variables.
\end_layout

\begin_layout Lemma
For the grammar from example
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "ex:2^n-grammar"

\end_inset

 it holds that 
\begin_inset Formula $\norm{F_{n}}=2^{n+1}-1$
\end_inset

.
\end_layout

\begin_layout Proof
By induction on 
\begin_inset Formula $n$
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $n=0$
\end_inset

: 
\begin_inset Formula $\norm{F_{0}}=1=2^{1}-1$
\end_inset

.
\end_layout

\begin_layout Itemize
\begin_inset Formula $n+1$
\end_inset

: 
\begin_inset Formula $\norm{F_{n+1}}=1+2\cdot\norm{F_{n}}\overset{\text{ind.}}{=}1+2\cdot\left(2^{n+1}-1\right)=1+2^{n+2}-2=2^{n+2}-1$
\end_inset

.
\end_layout

\end_deeper
\end_body
\end_document
